# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _base
else:
    import _base

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


RDB_DEFAULT_PORT = _base.RDB_DEFAULT_PORT
RDB_FEEDBACK_PORT = _base.RDB_FEEDBACK_PORT
RDB_IMAGE_PORT = _base.RDB_IMAGE_PORT
RDB_MAGIC_NO = _base.RDB_MAGIC_NO
RDB_VERSION = _base.RDB_VERSION
RDB_SIZE_OBJECT_NAME = _base.RDB_SIZE_OBJECT_NAME
RDB_SIZE_SCP_NAME = _base.RDB_SIZE_SCP_NAME
RDB_SIZE_FILENAME = _base.RDB_SIZE_FILENAME
RDB_SIZE_TRLIGHT_PHASES = _base.RDB_SIZE_TRLIGHT_PHASES
RDB_PKG_ID_START_OF_FRAME = _base.RDB_PKG_ID_START_OF_FRAME
RDB_PKG_ID_END_OF_FRAME = _base.RDB_PKG_ID_END_OF_FRAME
RDB_PKG_ID_COORD_SYSTEM = _base.RDB_PKG_ID_COORD_SYSTEM
RDB_PKG_ID_COORD = _base.RDB_PKG_ID_COORD
RDB_PKG_ID_ROAD_POS = _base.RDB_PKG_ID_ROAD_POS
RDB_PKG_ID_LANE_INFO = _base.RDB_PKG_ID_LANE_INFO
RDB_PKG_ID_ROADMARK = _base.RDB_PKG_ID_ROADMARK
RDB_PKG_ID_OBJECT_CFG = _base.RDB_PKG_ID_OBJECT_CFG
RDB_PKG_ID_OBJECT_STATE = _base.RDB_PKG_ID_OBJECT_STATE
RDB_PKG_ID_VEHICLE_SYSTEMS = _base.RDB_PKG_ID_VEHICLE_SYSTEMS
RDB_PKG_ID_VEHICLE_SETUP = _base.RDB_PKG_ID_VEHICLE_SETUP
RDB_PKG_ID_ENGINE = _base.RDB_PKG_ID_ENGINE
RDB_PKG_ID_DRIVETRAIN = _base.RDB_PKG_ID_DRIVETRAIN
RDB_PKG_ID_WHEEL = _base.RDB_PKG_ID_WHEEL
RDB_PKG_ID_PED_ANIMATION = _base.RDB_PKG_ID_PED_ANIMATION
RDB_PKG_ID_SENSOR_STATE = _base.RDB_PKG_ID_SENSOR_STATE
RDB_PKG_ID_SENSOR_OBJECT = _base.RDB_PKG_ID_SENSOR_OBJECT
RDB_PKG_ID_CAMERA = _base.RDB_PKG_ID_CAMERA
RDB_PKG_ID_CONTACT_POINT = _base.RDB_PKG_ID_CONTACT_POINT
RDB_PKG_ID_TRAFFIC_SIGN = _base.RDB_PKG_ID_TRAFFIC_SIGN
RDB_PKG_ID_ROAD_STATE = _base.RDB_PKG_ID_ROAD_STATE
RDB_PKG_ID_IMAGE = _base.RDB_PKG_ID_IMAGE
RDB_PKG_ID_LIGHT_SOURCE = _base.RDB_PKG_ID_LIGHT_SOURCE
RDB_PKG_ID_ENVIRONMENT = _base.RDB_PKG_ID_ENVIRONMENT
RDB_PKG_ID_TRIGGER = _base.RDB_PKG_ID_TRIGGER
RDB_PKG_ID_DRIVER_CTRL = _base.RDB_PKG_ID_DRIVER_CTRL
RDB_PKG_ID_TRAFFIC_LIGHT = _base.RDB_PKG_ID_TRAFFIC_LIGHT
RDB_PKG_ID_SYNC = _base.RDB_PKG_ID_SYNC
RDB_PKG_ID_DRIVER_PERCEPTION = _base.RDB_PKG_ID_DRIVER_PERCEPTION
RDB_PKG_ID_LIGHT_MAP = _base.RDB_PKG_ID_LIGHT_MAP
RDB_PKG_ID_TONE_MAPPING = _base.RDB_PKG_ID_TONE_MAPPING
RDB_PKG_ID_ROAD_QUERY = _base.RDB_PKG_ID_ROAD_QUERY
RDB_PKG_ID_SCP = _base.RDB_PKG_ID_SCP
RDB_PKG_ID_TRAJECTORY = _base.RDB_PKG_ID_TRAJECTORY
RDB_PKG_ID_DYN_2_STEER = _base.RDB_PKG_ID_DYN_2_STEER
RDB_PKG_ID_STEER_2_DYN = _base.RDB_PKG_ID_STEER_2_DYN
RDB_PKG_ID_PROXY = _base.RDB_PKG_ID_PROXY
RDB_PKG_ID_MOTION_SYSTEM = _base.RDB_PKG_ID_MOTION_SYSTEM
RDB_PKG_ID_OCCLUSION_MATRIX = _base.RDB_PKG_ID_OCCLUSION_MATRIX
RDB_PKG_ID_FREESPACE = _base.RDB_PKG_ID_FREESPACE
RDB_PKG_ID_DYN_EL_SWITCH = _base.RDB_PKG_ID_DYN_EL_SWITCH
RDB_PKG_ID_DYN_EL_DOF = _base.RDB_PKG_ID_DYN_EL_DOF
RDB_PKG_ID_IG_FRAME = _base.RDB_PKG_ID_IG_FRAME
RDB_PKG_ID_RAY = _base.RDB_PKG_ID_RAY
RDB_PKG_ID_RT_PERFORMANCE = _base.RDB_PKG_ID_RT_PERFORMANCE
RDB_PKG_ID_SYMBOL_STATE = _base.RDB_PKG_ID_SYMBOL_STATE
RDB_PKG_ID_CUSTOM_SCORING = _base.RDB_PKG_ID_CUSTOM_SCORING
RDB_PKG_ID_CUSTOM_OBJECT_CTRL_TRACK = _base.RDB_PKG_ID_CUSTOM_OBJECT_CTRL_TRACK
RDB_PKG_ID_CUSTOM_LIGHT_B = _base.RDB_PKG_ID_CUSTOM_LIGHT_B
RDB_PKG_ID_CUSTOM_LIGHT_A = _base.RDB_PKG_ID_CUSTOM_LIGHT_A
RDB_PKG_ID_CUSTOM_LIGHT_GROUP_B = _base.RDB_PKG_ID_CUSTOM_LIGHT_GROUP_B
RDB_PKG_ID_CUSTOM_LOOK_AHEAD = _base.RDB_PKG_ID_CUSTOM_LOOK_AHEAD
RDB_PKG_ID_CUSTOM_AUDI_FORUM = _base.RDB_PKG_ID_CUSTOM_AUDI_FORUM
RDB_PKG_ID_CUSTOM_OPTIX_START = _base.RDB_PKG_ID_CUSTOM_OPTIX_START
RDB_PKG_ID_OPTIX_BUFFER = _base.RDB_PKG_ID_OPTIX_BUFFER
RDB_PKG_ID_CUSTOM_OPTIX_END = _base.RDB_PKG_ID_CUSTOM_OPTIX_END
RDB_PKG_ID_CUSTOM_USER_A_START = _base.RDB_PKG_ID_CUSTOM_USER_A_START
RDB_PKG_ID_CUSTOM_USER_A_END = _base.RDB_PKG_ID_CUSTOM_USER_A_END
RDB_PKG_ID_CUSTOM_USER_B_START = _base.RDB_PKG_ID_CUSTOM_USER_B_START
RDB_PKG_ID_CUSTOM_USER_B_END = _base.RDB_PKG_ID_CUSTOM_USER_B_END
RDB_OBJECT_CATEGORY_NONE = _base.RDB_OBJECT_CATEGORY_NONE
RDB_OBJECT_CATEGORY_PLAYER = _base.RDB_OBJECT_CATEGORY_PLAYER
RDB_OBJECT_CATEGORY_SENSOR = _base.RDB_OBJECT_CATEGORY_SENSOR
RDB_OBJECT_CATEGORY_CAMERA = _base.RDB_OBJECT_CATEGORY_CAMERA
RDB_OBJECT_CATEGORY_LIGHT_POINT = _base.RDB_OBJECT_CATEGORY_LIGHT_POINT
RDB_OBJECT_CATEGORY_COMMON = _base.RDB_OBJECT_CATEGORY_COMMON
RDB_OBJECT_CATEGORY_OPENDRIVE = _base.RDB_OBJECT_CATEGORY_OPENDRIVE
RDB_OBJECT_TYPE_NONE = _base.RDB_OBJECT_TYPE_NONE
RDB_OBJECT_TYPE_PLAYER_NONE = _base.RDB_OBJECT_TYPE_PLAYER_NONE
RDB_OBJECT_TYPE_PLAYER_CAR = _base.RDB_OBJECT_TYPE_PLAYER_CAR
RDB_OBJECT_TYPE_PLAYER_TRUCK = _base.RDB_OBJECT_TYPE_PLAYER_TRUCK
RDB_OBJECT_TYPE_PLAYER_VAN = _base.RDB_OBJECT_TYPE_PLAYER_VAN
RDB_OBJECT_TYPE_PLAYER_BIKE = _base.RDB_OBJECT_TYPE_PLAYER_BIKE
RDB_OBJECT_TYPE_PLAYER_PEDESTRIAN = _base.RDB_OBJECT_TYPE_PLAYER_PEDESTRIAN
RDB_OBJECT_TYPE_PLAYER_PED_GROUP = _base.RDB_OBJECT_TYPE_PLAYER_PED_GROUP
RDB_OBJECT_TYPE_POLE = _base.RDB_OBJECT_TYPE_POLE
RDB_OBJECT_TYPE_TREE = _base.RDB_OBJECT_TYPE_TREE
RDB_OBJECT_TYPE_BARRIER = _base.RDB_OBJECT_TYPE_BARRIER
RDB_OBJECT_TYPE_OPT1 = _base.RDB_OBJECT_TYPE_OPT1
RDB_OBJECT_TYPE_OPT2 = _base.RDB_OBJECT_TYPE_OPT2
RDB_OBJECT_TYPE_OPT3 = _base.RDB_OBJECT_TYPE_OPT3
RDB_OBJECT_TYPE_PLAYER_MOTORBIKE = _base.RDB_OBJECT_TYPE_PLAYER_MOTORBIKE
RDB_OBJECT_TYPE_PLAYER_BUS = _base.RDB_OBJECT_TYPE_PLAYER_BUS
RDB_OBJECT_TYPE_STREET_LAMP = _base.RDB_OBJECT_TYPE_STREET_LAMP
RDB_OBJECT_TYPE_TRAFFIC_SIGN = _base.RDB_OBJECT_TYPE_TRAFFIC_SIGN
RDB_OBJECT_TYPE_HEADLIGHT = _base.RDB_OBJECT_TYPE_HEADLIGHT
RDB_OBJECT_TYPE_PLAYER_TRAILER = _base.RDB_OBJECT_TYPE_PLAYER_TRAILER
RDB_OBJECT_TYPE_BUILDING = _base.RDB_OBJECT_TYPE_BUILDING
RDB_OBJECT_TYPE_PARKING_SPACE = _base.RDB_OBJECT_TYPE_PARKING_SPACE
RDB_OBJECT_TYPE_ROAD_WORKS = _base.RDB_OBJECT_TYPE_ROAD_WORKS
RDB_OBJECT_TYPE_ROAD_MISC = _base.RDB_OBJECT_TYPE_ROAD_MISC
RDB_OBJECT_TYPE_TUNNEL = _base.RDB_OBJECT_TYPE_TUNNEL
RDB_OBJECT_TYPE_LEGACY = _base.RDB_OBJECT_TYPE_LEGACY
RDB_OBJECT_TYPE_VEGETATION = _base.RDB_OBJECT_TYPE_VEGETATION
RDB_OBJECT_TYPE_MISC_MOTORWAY = _base.RDB_OBJECT_TYPE_MISC_MOTORWAY
RDB_OBJECT_TYPE_MISC_TOWN = _base.RDB_OBJECT_TYPE_MISC_TOWN
RDB_OBJECT_TYPE_PATCH = _base.RDB_OBJECT_TYPE_PATCH
RDB_OBJECT_TYPE_OTHER = _base.RDB_OBJECT_TYPE_OTHER
RDB_OBJECT_PLAYER_SEMI_TRAILER = _base.RDB_OBJECT_PLAYER_SEMI_TRAILER
RDB_OBJECT_PLAYER_RAILCAR = _base.RDB_OBJECT_PLAYER_RAILCAR
RDB_OBJECT_PLAYER_RAILCAR_SEMI_HEAD = _base.RDB_OBJECT_PLAYER_RAILCAR_SEMI_HEAD
RDB_OBJECT_PLAYER_RAILCAR_SEMI_BACK = _base.RDB_OBJECT_PLAYER_RAILCAR_SEMI_BACK
RDB_OBJECT_TYPE_VEH_LIGHT_FRONT_LEFT = _base.RDB_OBJECT_TYPE_VEH_LIGHT_FRONT_LEFT
RDB_OBJECT_TYPE_VEH_LIGHT_FRONT_RIGHT = _base.RDB_OBJECT_TYPE_VEH_LIGHT_FRONT_RIGHT
RDB_OBJECT_TYPE_VEH_LIGHT_REAR_LEFT = _base.RDB_OBJECT_TYPE_VEH_LIGHT_REAR_LEFT
RDB_OBJECT_TYPE_VEH_LIGHT_REAR_RIGHT = _base.RDB_OBJECT_TYPE_VEH_LIGHT_REAR_RIGHT
RDB_OBJECT_TYPE_VEH_CABIN = _base.RDB_OBJECT_TYPE_VEH_CABIN
RDB_LANE_BORDER_UNKNOWN = _base.RDB_LANE_BORDER_UNKNOWN
RDB_LANE_BORDER_NONE = _base.RDB_LANE_BORDER_NONE
RDB_LANE_BORDER_POLE = _base.RDB_LANE_BORDER_POLE
RDB_LANE_BORDER_BARRIER = _base.RDB_LANE_BORDER_BARRIER
RDB_LANE_BORDER_SOFT_SHOULDER = _base.RDB_LANE_BORDER_SOFT_SHOULDER
RDB_LANE_BORDER_HARD_SHOULDER = _base.RDB_LANE_BORDER_HARD_SHOULDER
RDB_LANE_BORDER_CURB = _base.RDB_LANE_BORDER_CURB
RDB_ROADMARK_TYPE_NONE = _base.RDB_ROADMARK_TYPE_NONE
RDB_ROADMARK_TYPE_SOLID = _base.RDB_ROADMARK_TYPE_SOLID
RDB_ROADMARK_TYPE_BROKEN = _base.RDB_ROADMARK_TYPE_BROKEN
RDB_ROADMARK_TYPE_CURB = _base.RDB_ROADMARK_TYPE_CURB
RDB_ROADMARK_TYPE_GRASS = _base.RDB_ROADMARK_TYPE_GRASS
RDB_ROADMARK_TYPE_BOTDOT = _base.RDB_ROADMARK_TYPE_BOTDOT
RDB_ROADMARK_TYPE_OTHER = _base.RDB_ROADMARK_TYPE_OTHER
RDB_ROADMARK_TYPE_SOLID_SOLID = _base.RDB_ROADMARK_TYPE_SOLID_SOLID
RDB_ROADMARK_TYPE_BROKEN_SOLID = _base.RDB_ROADMARK_TYPE_BROKEN_SOLID
RDB_ROADMARK_TYPE_SOLID_BROKEN = _base.RDB_ROADMARK_TYPE_SOLID_BROKEN
RDB_ROADMARK_TYPE_LANE_CENTER = _base.RDB_ROADMARK_TYPE_LANE_CENTER
RDB_ROADMARK_COLOR_NONE = _base.RDB_ROADMARK_COLOR_NONE
RDB_ROADMARK_COLOR_WHITE = _base.RDB_ROADMARK_COLOR_WHITE
RDB_ROADMARK_COLOR_RED = _base.RDB_ROADMARK_COLOR_RED
RDB_ROADMARK_COLOR_YELLOW = _base.RDB_ROADMARK_COLOR_YELLOW
RDB_ROADMARK_COLOR_OTHER = _base.RDB_ROADMARK_COLOR_OTHER
RDB_ROADMARK_COLOR_BLUE = _base.RDB_ROADMARK_COLOR_BLUE
RDB_ROADMARK_COLOR_GREEN = _base.RDB_ROADMARK_COLOR_GREEN
RDB_WHEEL_ID_FRONT_LEFT = _base.RDB_WHEEL_ID_FRONT_LEFT
RDB_GEAR_BOX_TYPE_AUTOMATIC = _base.RDB_GEAR_BOX_TYPE_AUTOMATIC
RDB_GEAR_BOX_TYPE_MANUAL = _base.RDB_GEAR_BOX_TYPE_MANUAL
RDB_GEAR_BOX_POS_AUTO = _base.RDB_GEAR_BOX_POS_AUTO
RDB_GEAR_BOX_POS_P = _base.RDB_GEAR_BOX_POS_P
RDB_GEAR_BOX_POS_R = _base.RDB_GEAR_BOX_POS_R
RDB_GEAR_BOX_POS_N = _base.RDB_GEAR_BOX_POS_N
RDB_GEAR_BOX_POS_D = _base.RDB_GEAR_BOX_POS_D
RDB_GEAR_BOX_POS_1 = _base.RDB_GEAR_BOX_POS_1
RDB_GEAR_BOX_POS_2 = _base.RDB_GEAR_BOX_POS_2
RDB_GEAR_BOX_POS_3 = _base.RDB_GEAR_BOX_POS_3
RDB_GEAR_BOX_POS_4 = _base.RDB_GEAR_BOX_POS_4
RDB_GEAR_BOX_POS_5 = _base.RDB_GEAR_BOX_POS_5
RDB_GEAR_BOX_POS_6 = _base.RDB_GEAR_BOX_POS_6
RDB_GEAR_BOX_POS_7 = _base.RDB_GEAR_BOX_POS_7
RDB_GEAR_BOX_POS_8 = _base.RDB_GEAR_BOX_POS_8
RDB_GEAR_BOX_POS_9 = _base.RDB_GEAR_BOX_POS_9
RDB_GEAR_BOX_POS_10 = _base.RDB_GEAR_BOX_POS_10
RDB_GEAR_BOX_POS_11 = _base.RDB_GEAR_BOX_POS_11
RDB_GEAR_BOX_POS_12 = _base.RDB_GEAR_BOX_POS_12
RDB_GEAR_BOX_POS_13 = _base.RDB_GEAR_BOX_POS_13
RDB_GEAR_BOX_POS_14 = _base.RDB_GEAR_BOX_POS_14
RDB_GEAR_BOX_POS_15 = _base.RDB_GEAR_BOX_POS_15
RDB_GEAR_BOX_POS_16 = _base.RDB_GEAR_BOX_POS_16
RDB_GEAR_BOX_POS_R1 = _base.RDB_GEAR_BOX_POS_R1
RDB_GEAR_BOX_POS_R2 = _base.RDB_GEAR_BOX_POS_R2
RDB_GEAR_BOX_POS_R3 = _base.RDB_GEAR_BOX_POS_R3
RDB_GEAR_BOX_POS_M = _base.RDB_GEAR_BOX_POS_M
RDB_GEAR_BOX_POS_M_UP = _base.RDB_GEAR_BOX_POS_M_UP
RDB_GEAR_BOX_POS_M_DOWN = _base.RDB_GEAR_BOX_POS_M_DOWN
RDB_GEAR_BOX_POS_C = _base.RDB_GEAR_BOX_POS_C
RDB_GEAR_BOX_POS_MS = _base.RDB_GEAR_BOX_POS_MS
RDB_GEAR_BOX_POS_CS = _base.RDB_GEAR_BOX_POS_CS
RDB_GEAR_BOX_POS_PS = _base.RDB_GEAR_BOX_POS_PS
RDB_GEAR_BOX_POS_RS = _base.RDB_GEAR_BOX_POS_RS
RDB_GEAR_BOX_POS_NS = _base.RDB_GEAR_BOX_POS_NS
RDB_GEAR_BOX_POS_DS = _base.RDB_GEAR_BOX_POS_DS
RDB_DRIVETRAIN_TYPE_FRONT = _base.RDB_DRIVETRAIN_TYPE_FRONT
RDB_DRIVETRAIN_TYPE_REAR = _base.RDB_DRIVETRAIN_TYPE_REAR
RDB_DRIVETRAIN_TYPE_AWD = _base.RDB_DRIVETRAIN_TYPE_AWD
RDB_PIX_FORMAT_RGB = _base.RDB_PIX_FORMAT_RGB
RDB_PIX_FORMAT_RGB_16 = _base.RDB_PIX_FORMAT_RGB_16
RDB_PIX_FORMAT_RGB_24 = _base.RDB_PIX_FORMAT_RGB_24
RDB_PIX_FORMAT_RGBA = _base.RDB_PIX_FORMAT_RGBA
RDB_PIX_FORMAT_RGBA_16 = _base.RDB_PIX_FORMAT_RGBA_16
RDB_PIX_FORMAT_RGBA_24 = _base.RDB_PIX_FORMAT_RGBA_24
RDB_PIX_FORMAT_BW_8 = _base.RDB_PIX_FORMAT_BW_8
RDB_PIX_FORMAT_BW_16 = _base.RDB_PIX_FORMAT_BW_16
RDB_PIX_FORMAT_BW_24 = _base.RDB_PIX_FORMAT_BW_24
RDB_PIX_FORMAT_DEPTH_8 = _base.RDB_PIX_FORMAT_DEPTH_8
RDB_PIX_FORMAT_DEPTH_16 = _base.RDB_PIX_FORMAT_DEPTH_16
RDB_PIX_FORMAT_DEPTH_24 = _base.RDB_PIX_FORMAT_DEPTH_24
RDB_PIX_FORMAT_RGB_32_F = _base.RDB_PIX_FORMAT_RGB_32_F
RDB_PIX_FORMAT_RGBA_32_F = _base.RDB_PIX_FORMAT_RGBA_32_F
RDB_PIX_FORMAT_LUM_32_F = _base.RDB_PIX_FORMAT_LUM_32_F
RDB_PIX_FORMAT_LUMA_32_F = _base.RDB_PIX_FORMAT_LUMA_32_F
RDB_PIX_FORMAT_RGB_16_F = _base.RDB_PIX_FORMAT_RGB_16_F
RDB_PIX_FORMAT_RGBA_16_F = _base.RDB_PIX_FORMAT_RGBA_16_F
RDB_PIX_FORMAT_LUM_16_F = _base.RDB_PIX_FORMAT_LUM_16_F
RDB_PIX_FORMAT_LUMA_16_F = _base.RDB_PIX_FORMAT_LUMA_16_F
RDB_PIX_FORMAT_DEPTH_32 = _base.RDB_PIX_FORMAT_DEPTH_32
RDB_PIX_FORMAT_BW_32 = _base.RDB_PIX_FORMAT_BW_32
RDB_PIX_FORMAT_RGB_32 = _base.RDB_PIX_FORMAT_RGB_32
RDB_PIX_FORMAT_RGBA_32 = _base.RDB_PIX_FORMAT_RGBA_32
RDB_PIX_FORMAT_R3_G2_B2 = _base.RDB_PIX_FORMAT_R3_G2_B2
RDB_PIX_FORMAT_R3_G2_B2_A8 = _base.RDB_PIX_FORMAT_R3_G2_B2_A8
RDB_PIX_FORMAT_R5_G6_B5 = _base.RDB_PIX_FORMAT_R5_G6_B5
RDB_PIX_FORMAT_R5_G6_B5_A16 = _base.RDB_PIX_FORMAT_R5_G6_B5_A16
RDB_PIX_FORMAT_RED8 = _base.RDB_PIX_FORMAT_RED8
RDB_PIX_FORMAT_RED16 = _base.RDB_PIX_FORMAT_RED16
RDB_PIX_FORMAT_RED16F = _base.RDB_PIX_FORMAT_RED16F
RDB_PIX_FORMAT_RED24 = _base.RDB_PIX_FORMAT_RED24
RDB_PIX_FORMAT_RED32 = _base.RDB_PIX_FORMAT_RED32
RDB_PIX_FORMAT_RED32F = _base.RDB_PIX_FORMAT_RED32F
RDB_PIX_FORMAT_RG8 = _base.RDB_PIX_FORMAT_RG8
RDB_PIX_FORMAT_RG16 = _base.RDB_PIX_FORMAT_RG16
RDB_PIX_FORMAT_RG16F = _base.RDB_PIX_FORMAT_RG16F
RDB_PIX_FORMAT_RG32 = _base.RDB_PIX_FORMAT_RG32
RDB_PIX_FORMAT_RG32F = _base.RDB_PIX_FORMAT_RG32F
RDB_PIX_FORMAT_RGB8 = _base.RDB_PIX_FORMAT_RGB8
RDB_PIX_FORMAT_RGBA8 = _base.RDB_PIX_FORMAT_RGBA8
RDB_PIX_FORMAT_RGB8_A24 = _base.RDB_PIX_FORMAT_RGB8_A24
RDB_PIX_FORMAT_RGB16 = _base.RDB_PIX_FORMAT_RGB16
RDB_PIX_FORMAT_RGB16F = _base.RDB_PIX_FORMAT_RGB16F
RDB_PIX_FORMAT_RGBA16 = _base.RDB_PIX_FORMAT_RGBA16
RDB_PIX_FORMAT_RGBA16F = _base.RDB_PIX_FORMAT_RGBA16F
RDB_PIX_FORMAT_RGB32 = _base.RDB_PIX_FORMAT_RGB32
RDB_PIX_FORMAT_RGB32F = _base.RDB_PIX_FORMAT_RGB32F
RDB_PIX_FORMAT_RGBA32 = _base.RDB_PIX_FORMAT_RGBA32
RDB_PIX_FORMAT_RGBA32F = _base.RDB_PIX_FORMAT_RGBA32F
RDB_PIX_FORMAT_DEPTH8 = _base.RDB_PIX_FORMAT_DEPTH8
RDB_PIX_FORMAT_DEPTH16 = _base.RDB_PIX_FORMAT_DEPTH16
RDB_PIX_FORMAT_DEPTH24 = _base.RDB_PIX_FORMAT_DEPTH24
RDB_PIX_FORMAT_DEPTH32 = _base.RDB_PIX_FORMAT_DEPTH32
RDB_PIX_FORMAT_CUSTOM_01 = _base.RDB_PIX_FORMAT_CUSTOM_01
RDB_PIX_FORMAT_CUSTOM_02 = _base.RDB_PIX_FORMAT_CUSTOM_02
RDB_PIX_FORMAT_CUSTOM_03 = _base.RDB_PIX_FORMAT_CUSTOM_03
RDB_SENSOR_TYPE_NONE = _base.RDB_SENSOR_TYPE_NONE
RDB_SENSOR_TYPE_RADAR = _base.RDB_SENSOR_TYPE_RADAR
RDB_SENSOR_TYPE_VIDEO = _base.RDB_SENSOR_TYPE_VIDEO
RDB_TRLIGHT_PHASE_OFF = _base.RDB_TRLIGHT_PHASE_OFF
RDB_TRLIGHT_PHASE_STOP = _base.RDB_TRLIGHT_PHASE_STOP
RDB_TRLIGHT_PHASE_STOP_ATTN = _base.RDB_TRLIGHT_PHASE_STOP_ATTN
RDB_TRLIGHT_PHASE_GO = _base.RDB_TRLIGHT_PHASE_GO
RDB_TRLIGHT_PHASE_GO_EXCL = _base.RDB_TRLIGHT_PHASE_GO_EXCL
RDB_TRLIGHT_PHASE_ATTN = _base.RDB_TRLIGHT_PHASE_ATTN
RDB_TRLIGHT_PHASE_BLINK = _base.RDB_TRLIGHT_PHASE_BLINK
RDB_TRLIGHT_PHASE_UNKNOWN = _base.RDB_TRLIGHT_PHASE_UNKNOWN
RDB_COORD_TYPE_INERTIAL = _base.RDB_COORD_TYPE_INERTIAL
RDB_COORD_TYPE_RESERVED_1 = _base.RDB_COORD_TYPE_RESERVED_1
RDB_COORD_TYPE_PLAYER = _base.RDB_COORD_TYPE_PLAYER
RDB_COORD_TYPE_SENSOR = _base.RDB_COORD_TYPE_SENSOR
RDB_COORD_TYPE_USK = _base.RDB_COORD_TYPE_USK
RDB_COORD_TYPE_USER = _base.RDB_COORD_TYPE_USER
RDB_COORD_TYPE_WINDOW = _base.RDB_COORD_TYPE_WINDOW
RDB_COORD_TYPE_TEXTURE = _base.RDB_COORD_TYPE_TEXTURE
RDB_COORD_TYPE_RELATIVE_START = _base.RDB_COORD_TYPE_RELATIVE_START
RDB_COORD_TYPE_GEO = _base.RDB_COORD_TYPE_GEO
RDB_COORD_TYPE_TRACK = _base.RDB_COORD_TYPE_TRACK
RDB_ENV_CLOUD_STATE_OFF = _base.RDB_ENV_CLOUD_STATE_OFF
RDB_ENV_CLOUD_STATE_0_8 = _base.RDB_ENV_CLOUD_STATE_0_8
RDB_ENV_CLOUD_STATE_4_8 = _base.RDB_ENV_CLOUD_STATE_4_8
RDB_ENV_CLOUD_STATE_6_8 = _base.RDB_ENV_CLOUD_STATE_6_8
RDB_ENV_CLOUD_STATE_8_8 = _base.RDB_ENV_CLOUD_STATE_8_8
RDB_FUNCTION_TYPE_NONE = _base.RDB_FUNCTION_TYPE_NONE
RDB_FUNCTION_TYPE_TONE_MAPPING = _base.RDB_FUNCTION_TYPE_TONE_MAPPING
RDB_ROAD_TYPE_UNKNOWN = _base.RDB_ROAD_TYPE_UNKNOWN
RDB_ROAD_TYPE_RURAL = _base.RDB_ROAD_TYPE_RURAL
RDB_ROAD_TYPE_MOTORWAY = _base.RDB_ROAD_TYPE_MOTORWAY
RDB_ROAD_TYPE_TOWN = _base.RDB_ROAD_TYPE_TOWN
RDB_ROAD_TYPE_LOW_SPEED = _base.RDB_ROAD_TYPE_LOW_SPEED
RDB_ROAD_TYPE_PEDESTRIAN = _base.RDB_ROAD_TYPE_PEDESTRIAN
RDB_DRIVER_SOURCE_UNKNOWN = _base.RDB_DRIVER_SOURCE_UNKNOWN
RDB_DRIVER_SOURCE_GHOSTDRIVER = _base.RDB_DRIVER_SOURCE_GHOSTDRIVER
RDB_SHM_SIZE_TC = _base.RDB_SHM_SIZE_TC
RDB_FREESPACE_STATE_OBJECT_NONE = _base.RDB_FREESPACE_STATE_OBJECT_NONE
RDB_FREESPACE_STATE_OBJECT_SAME_DIR = _base.RDB_FREESPACE_STATE_OBJECT_SAME_DIR
RDB_FREESPACE_STATE_OBJECT_ONCOMING = _base.RDB_FREESPACE_STATE_OBJECT_ONCOMING
RDB_DYN_EL_SCOPE_UNKNOWN = _base.RDB_DYN_EL_SCOPE_UNKNOWN
RDB_DYN_EL_SCOPE_STATIC_DB = _base.RDB_DYN_EL_SCOPE_STATIC_DB
RDB_DYN_EL_SCOPE_DYN_OBJECT = _base.RDB_DYN_EL_SCOPE_DYN_OBJECT
RDB_DYN_EL_SCOPE_ANY = _base.RDB_DYN_EL_SCOPE_ANY
RDB_DYN_EL_SCOPE_FIRST = _base.RDB_DYN_EL_SCOPE_FIRST
RDB_DYN_EL_SCOPE_STATIC_DB_SIGNAL = _base.RDB_DYN_EL_SCOPE_STATIC_DB_SIGNAL
RDB_DYN_EL_SCOPE_STATIC_DB_SWITCH = _base.RDB_DYN_EL_SCOPE_STATIC_DB_SWITCH
RDB_RAY_TYPE_UNKNOWN = _base.RDB_RAY_TYPE_UNKNOWN
RDB_RAY_TYPE_EMIT = _base.RDB_RAY_TYPE_EMIT
RDB_RAY_TYPE_HIT = _base.RDB_RAY_TYPE_HIT
RDB_UNIT_DEFAULT = _base.RDB_UNIT_DEFAULT
RDB_UNIT_M = _base.RDB_UNIT_M
RDB_UNIT_S = _base.RDB_UNIT_S
RDB_PKG_FLAG_NONE = _base.RDB_PKG_FLAG_NONE
RDB_PKG_FLAG_EXTENDED = _base.RDB_PKG_FLAG_EXTENDED
RDB_PKG_FLAG_HIDDEN = _base.RDB_PKG_FLAG_HIDDEN
RDB_OBJECT_VIS_FLAG_ALL = _base.RDB_OBJECT_VIS_FLAG_ALL
RDB_OBJECT_VIS_FLAG_NONE = _base.RDB_OBJECT_VIS_FLAG_NONE
RDB_OBJECT_VIS_FLAG_GFX = _base.RDB_OBJECT_VIS_FLAG_GFX
RDB_OBJECT_VIS_FLAG_TRAFFIC = _base.RDB_OBJECT_VIS_FLAG_TRAFFIC
RDB_OBJECT_VIS_FLAG_RECORDER = _base.RDB_OBJECT_VIS_FLAG_RECORDER
RDB_VEHICLE_LIGHT_OFF = _base.RDB_VEHICLE_LIGHT_OFF
RDB_VEHICLE_LIGHT_PARK = _base.RDB_VEHICLE_LIGHT_PARK
RDB_VEHICLE_LIGHT_LOW_BEAM = _base.RDB_VEHICLE_LIGHT_LOW_BEAM
RDB_VEHICLE_LIGHT_HIGH_BEAM = _base.RDB_VEHICLE_LIGHT_HIGH_BEAM
RDB_VEHICLE_LIGHT_REAR_BRAKE = _base.RDB_VEHICLE_LIGHT_REAR_BRAKE
RDB_VEHICLE_LIGHT_REAR_DRIVE = _base.RDB_VEHICLE_LIGHT_REAR_DRIVE
RDB_VEHICLE_LIGHT_INDICATOR_L = _base.RDB_VEHICLE_LIGHT_INDICATOR_L
RDB_VEHICLE_LIGHT_INDICATOR_R = _base.RDB_VEHICLE_LIGHT_INDICATOR_R
RDB_VEHICLE_LIGHT_FLASH = _base.RDB_VEHICLE_LIGHT_FLASH
RDB_VEHICLE_LIGHT_FRONT_FOG = _base.RDB_VEHICLE_LIGHT_FRONT_FOG
RDB_VEHICLE_LIGHT_REAR_FOG = _base.RDB_VEHICLE_LIGHT_REAR_FOG
RDB_VEHICLE_LIGHT_VIRES1 = _base.RDB_VEHICLE_LIGHT_VIRES1
RDB_VEHICLE_LIGHT_DRL = _base.RDB_VEHICLE_LIGHT_DRL
RDB_VEHICLE_LIGHT_DRL_LEFT_LOW = _base.RDB_VEHICLE_LIGHT_DRL_LEFT_LOW
RDB_VEHICLE_LIGHT_DRL_RIGHT_LOW = _base.RDB_VEHICLE_LIGHT_DRL_RIGHT_LOW
RDB_VEHICLE_LIGHT_EMERGENCY = _base.RDB_VEHICLE_LIGHT_EMERGENCY
RDB_VEHICLE_LIGHT_INDICATOR_LAMP_ON = _base.RDB_VEHICLE_LIGHT_INDICATOR_LAMP_ON
RDB_VEHICLE_LIGHT_FORCE = _base.RDB_VEHICLE_LIGHT_FORCE
RDB_VEHICLE_ACC_FLAG_OFF = _base.RDB_VEHICLE_ACC_FLAG_OFF
RDB_VEHICLE_ACC_FLAG_DIST_1 = _base.RDB_VEHICLE_ACC_FLAG_DIST_1
RDB_VEHICLE_ACC_FLAG_DIST_2 = _base.RDB_VEHICLE_ACC_FLAG_DIST_2
RDB_VEHICLE_ACC_FLAG_DIST_3 = _base.RDB_VEHICLE_ACC_FLAG_DIST_3
RDB_VEHICLE_ACC_FLAG_TARGET = _base.RDB_VEHICLE_ACC_FLAG_TARGET
RDB_VEHICLE_ACC_FLAG_SPEED = _base.RDB_VEHICLE_ACC_FLAG_SPEED
RDB_VEHICLE_DISPLAY_LIGHT_OFF = _base.RDB_VEHICLE_DISPLAY_LIGHT_OFF
RDB_VEHICLE_DISPLAY_LIGHT_01 = _base.RDB_VEHICLE_DISPLAY_LIGHT_01
RDB_VEHICLE_DISPLAY_LIGHT_02 = _base.RDB_VEHICLE_DISPLAY_LIGHT_02
RDB_VEHICLE_DISPLAY_LIGHT_03 = _base.RDB_VEHICLE_DISPLAY_LIGHT_03
RDB_VEHICLE_DISPLAY_LIGHT_04 = _base.RDB_VEHICLE_DISPLAY_LIGHT_04
RDB_VEHICLE_DISPLAY_LIGHT_05 = _base.RDB_VEHICLE_DISPLAY_LIGHT_05
RDB_VEHICLE_DISPLAY_LIGHT_06 = _base.RDB_VEHICLE_DISPLAY_LIGHT_06
RDB_VEHICLE_DISPLAY_LIGHT_07 = _base.RDB_VEHICLE_DISPLAY_LIGHT_07
RDB_VEHICLE_DISPLAY_LIGHT_08 = _base.RDB_VEHICLE_DISPLAY_LIGHT_08
RDB_VEHICLE_DISPLAY_LIGHT_09 = _base.RDB_VEHICLE_DISPLAY_LIGHT_09
RDB_VEHICLE_DISPLAY_LIGHT_10 = _base.RDB_VEHICLE_DISPLAY_LIGHT_10
RDB_VEHICLE_DISPLAY_LIGHT_11 = _base.RDB_VEHICLE_DISPLAY_LIGHT_11
RDB_VEHICLE_DISPLAY_LIGHT_12 = _base.RDB_VEHICLE_DISPLAY_LIGHT_12
RDB_VEHICLE_DISPLAY_LIGHT_13 = _base.RDB_VEHICLE_DISPLAY_LIGHT_13
RDB_VEHICLE_DISPLAY_LIGHT_14 = _base.RDB_VEHICLE_DISPLAY_LIGHT_14
RDB_VEHICLE_DISPLAY_LIGHT_15 = _base.RDB_VEHICLE_DISPLAY_LIGHT_15
RDB_VEHICLE_DISPLAY_LIGHT_16 = _base.RDB_VEHICLE_DISPLAY_LIGHT_16
RDB_LANE_EXISTS_OWN = _base.RDB_LANE_EXISTS_OWN
RDB_LANE_EXISTS_LEFT = _base.RDB_LANE_EXISTS_LEFT
RDB_LANE_EXISTS_RIGHT = _base.RDB_LANE_EXISTS_RIGHT
RDB_LANE_STATUS_NONE = _base.RDB_LANE_STATUS_NONE
RDB_LANE_STATUS_ROADWORKS = _base.RDB_LANE_STATUS_ROADWORKS
RDB_LANE_STATUS_EXIT = _base.RDB_LANE_STATUS_EXIT
RDB_LANE_STATUS_ENTRY = _base.RDB_LANE_STATUS_ENTRY
RDB_LANE_STATUS_LINKED = _base.RDB_LANE_STATUS_LINKED
RDB_LANE_STATUS_WET = _base.RDB_LANE_STATUS_WET
RDB_LANE_STATUS_SNOW = _base.RDB_LANE_STATUS_SNOW
RDB_DRIVER_FLAG_NONE = _base.RDB_DRIVER_FLAG_NONE
RDB_DRIVER_FLAG_INDICATOR_L = _base.RDB_DRIVER_FLAG_INDICATOR_L
RDB_DRIVER_FLAG_INDICATOR_R = _base.RDB_DRIVER_FLAG_INDICATOR_R
RDB_DRIVER_FLAG_PARKING_BRAKE = _base.RDB_DRIVER_FLAG_PARKING_BRAKE
RDB_DRIVER_FLAG_LIGHT_LOW_BEAM = _base.RDB_DRIVER_FLAG_LIGHT_LOW_BEAM
RDB_DRIVER_FLAG_LIGHT_HIGH_BEAM = _base.RDB_DRIVER_FLAG_LIGHT_HIGH_BEAM
RDB_DRIVER_FLAG_LIGHT_FOG_FRONT = _base.RDB_DRIVER_FLAG_LIGHT_FOG_FRONT
RDB_DRIVER_FLAG_LIGHT_FOG_REAR = _base.RDB_DRIVER_FLAG_LIGHT_FOG_REAR
RDB_DRIVER_FLAG_LIGHT_EMERGENCY = _base.RDB_DRIVER_FLAG_LIGHT_EMERGENCY
RDB_DRIVER_FLAG_LIGHT_PRIORITY = _base.RDB_DRIVER_FLAG_LIGHT_PRIORITY
RDB_DRIVER_FLAG_COLLISION = _base.RDB_DRIVER_FLAG_COLLISION
RDB_MOCKUP_INPUT0_MFL_PLUS = _base.RDB_MOCKUP_INPUT0_MFL_PLUS
RDB_MOCKUP_INPUT0_MFL_MINUS = _base.RDB_MOCKUP_INPUT0_MFL_MINUS
RDB_MOCKUP_INPUT0_MFL_PHONE = _base.RDB_MOCKUP_INPUT0_MFL_PHONE
RDB_MOCKUP_INPUT0_MFL_VOICE = _base.RDB_MOCKUP_INPUT0_MFL_VOICE
RDB_MOCKUP_INPUT0_MFL_UP = _base.RDB_MOCKUP_INPUT0_MFL_UP
RDB_MOCKUP_INPUT0_MFL_DOWN = _base.RDB_MOCKUP_INPUT0_MFL_DOWN
RDB_MOCKUP_INPUT0_MFL_DIAMOND = _base.RDB_MOCKUP_INPUT0_MFL_DIAMOND
RDB_MOCKUP_INPUT0_MFL_STAR = _base.RDB_MOCKUP_INPUT0_MFL_STAR
RDB_MOCKUP_INPUT0_TURN_UP = _base.RDB_MOCKUP_INPUT0_TURN_UP
RDB_MOCKUP_INPUT0_TURN_UP_2 = _base.RDB_MOCKUP_INPUT0_TURN_UP_2
RDB_MOCKUP_INPUT0_TURN_DOWN = _base.RDB_MOCKUP_INPUT0_TURN_DOWN
RDB_MOCKUP_INPUT0_TURN_DOWN_2 = _base.RDB_MOCKUP_INPUT0_TURN_DOWN_2
RDB_MOCKUP_INPUT0_TURN_FLASHER = _base.RDB_MOCKUP_INPUT0_TURN_FLASHER
RDB_MOCKUP_INPUT0_TURN_HIGHBEAM = _base.RDB_MOCKUP_INPUT0_TURN_HIGHBEAM
RDB_MOCKUP_INPUT0_TURN_CHECK = _base.RDB_MOCKUP_INPUT0_TURN_CHECK
RDB_MOCKUP_INPUT0_TURN_BC = _base.RDB_MOCKUP_INPUT0_TURN_BC
RDB_MOCKUP_INPUT0_ACC_BACK = _base.RDB_MOCKUP_INPUT0_ACC_BACK
RDB_MOCKUP_INPUT0_ACC_BACK_2 = _base.RDB_MOCKUP_INPUT0_ACC_BACK_2
RDB_MOCKUP_INPUT0_ACC_FWD = _base.RDB_MOCKUP_INPUT0_ACC_FWD
RDB_MOCKUP_INPUT0_ACC_FWD_2 = _base.RDB_MOCKUP_INPUT0_ACC_FWD_2
RDB_MOCKUP_INPUT0_ACC_UP = _base.RDB_MOCKUP_INPUT0_ACC_UP
RDB_MOCKUP_INPUT0_ACC_DOWN = _base.RDB_MOCKUP_INPUT0_ACC_DOWN
RDB_MOCKUP_INPUT0_ACC_SET = _base.RDB_MOCKUP_INPUT0_ACC_SET
RDB_MOCKUP_INPUT0_HORN = _base.RDB_MOCKUP_INPUT0_HORN
RDB_MOCKUP_INPUT0_WIPER_INTERVAL = _base.RDB_MOCKUP_INPUT0_WIPER_INTERVAL
RDB_MOCKUP_INPUT0_WIPER_INTERVAL_1 = _base.RDB_MOCKUP_INPUT0_WIPER_INTERVAL_1
RDB_MOCKUP_INPUT0_WIPER_INTERVAL_2 = _base.RDB_MOCKUP_INPUT0_WIPER_INTERVAL_2
RDB_MOCKUP_INPUT0_WIPER_INTERVAL_3 = _base.RDB_MOCKUP_INPUT0_WIPER_INTERVAL_3
RDB_MOCKUP_INPUT0_WIPER_AUTO = _base.RDB_MOCKUP_INPUT0_WIPER_AUTO
RDB_MOCKUP_INPUT0_WIPER_BACK = _base.RDB_MOCKUP_INPUT0_WIPER_BACK
RDB_MOCKUP_INPUT0_WIPER_UP = _base.RDB_MOCKUP_INPUT0_WIPER_UP
RDB_MOCKUP_INPUT0_WIPER_UP_2 = _base.RDB_MOCKUP_INPUT0_WIPER_UP_2
RDB_MOCKUP_INPUT0_WIPER_DOWN = _base.RDB_MOCKUP_INPUT0_WIPER_DOWN
RDB_MOCKUP_INPUT1_ZBE_COUNTER = _base.RDB_MOCKUP_INPUT1_ZBE_COUNTER
RDB_MOCKUP_INPUT1_ZBE_FWD = _base.RDB_MOCKUP_INPUT1_ZBE_FWD
RDB_MOCKUP_INPUT1_ZBE_BACK = _base.RDB_MOCKUP_INPUT1_ZBE_BACK
RDB_MOCKUP_INPUT1_ZBE_LEFT = _base.RDB_MOCKUP_INPUT1_ZBE_LEFT
RDB_MOCKUP_INPUT1_ZBE_RIGHT = _base.RDB_MOCKUP_INPUT1_ZBE_RIGHT
RDB_MOCKUP_INPUT1_ZBE_PRESS = _base.RDB_MOCKUP_INPUT1_ZBE_PRESS
RDB_MOCKUP_INPUT1_ZBE_MENU = _base.RDB_MOCKUP_INPUT1_ZBE_MENU
RDB_MOCKUP_INPUT1_GWS_P = _base.RDB_MOCKUP_INPUT1_GWS_P
RDB_MOCKUP_INPUT1_GWS_LOCK = _base.RDB_MOCKUP_INPUT1_GWS_LOCK
RDB_MOCKUP_INPUT1_GWS_FWD = _base.RDB_MOCKUP_INPUT1_GWS_FWD
RDB_MOCKUP_INPUT1_GWS_FWD_2 = _base.RDB_MOCKUP_INPUT1_GWS_FWD_2
RDB_MOCKUP_INPUT1_GWS_BACK = _base.RDB_MOCKUP_INPUT1_GWS_BACK
RDB_MOCKUP_INPUT1_GWS_BACK_2 = _base.RDB_MOCKUP_INPUT1_GWS_BACK_2
RDB_MOCKUP_INPUT1_GWS_AUTO_N = _base.RDB_MOCKUP_INPUT1_GWS_AUTO_N
RDB_MOCKUP_INPUT1_GWS_MAN_N = _base.RDB_MOCKUP_INPUT1_GWS_MAN_N
RDB_MOCKUP_INPUT1_GWS_MAN_PLUS = _base.RDB_MOCKUP_INPUT1_GWS_MAN_PLUS
RDB_MOCKUP_INPUT1_GWS_MAN_MINUS = _base.RDB_MOCKUP_INPUT1_GWS_MAN_MINUS
RDB_MOCKUP_INPUT2_LSZ_POTI = _base.RDB_MOCKUP_INPUT2_LSZ_POTI
RDB_MOCKUP_INPUT2_LSZ_PARKING = _base.RDB_MOCKUP_INPUT2_LSZ_PARKING
RDB_MOCKUP_INPUT2_LSZ_DRIVING = _base.RDB_MOCKUP_INPUT2_LSZ_DRIVING
RDB_MOCKUP_INPUT2_LSZ_AUTO = _base.RDB_MOCKUP_INPUT2_LSZ_AUTO
RDB_MOCKUP_INPUT2_LSZ_FOG_FRONT = _base.RDB_MOCKUP_INPUT2_LSZ_FOG_FRONT
RDB_MOCKUP_INPUT2_LSZ_FOG_REAR = _base.RDB_MOCKUP_INPUT2_LSZ_FOG_REAR
RDB_MOCKUP_INPUT2_DB_DTC = _base.RDB_MOCKUP_INPUT2_DB_DTC
RDB_MOCKUP_INPUT2_DB_PDC = _base.RDB_MOCKUP_INPUT2_DB_PDC
RDB_MOCKUP_INPUT2_DB_SEAT_HEAT_L = _base.RDB_MOCKUP_INPUT2_DB_SEAT_HEAT_L
RDB_MOCKUP_INPUT2_DB_SEAT_HEAT_R = _base.RDB_MOCKUP_INPUT2_DB_SEAT_HEAT_R
RDB_MOCKUP_INPUT2_DB_STARTER = _base.RDB_MOCKUP_INPUT2_DB_STARTER
RDB_MOCKUP_INPUT2_DB_HAZARD_LIGHTS = _base.RDB_MOCKUP_INPUT2_DB_HAZARD_LIGHTS
RDB_MOCKUP_INPUT2_DB_LOCK = _base.RDB_MOCKUP_INPUT2_DB_LOCK
RDB_MOCKUP_INPUT2_DB_STEER_ADJUST_FWD = _base.RDB_MOCKUP_INPUT2_DB_STEER_ADJUST_FWD
RDB_MOCKUP_INPUT2_DB_STEER_ADJUST_BACK = _base.RDB_MOCKUP_INPUT2_DB_STEER_ADJUST_BACK
RDB_MOCKUP_INPUT2_DB_STEER_ADJUST_UP = _base.RDB_MOCKUP_INPUT2_DB_STEER_ADJUST_UP
RDB_MOCKUP_INPUT2_DB_STEER_ADJUST_DOWN = _base.RDB_MOCKUP_INPUT2_DB_STEER_ADJUST_DOWN
RDB_DRIVER_PERCEPTION_FLAG_NONE = _base.RDB_DRIVER_PERCEPTION_FLAG_NONE
RDB_DRIVER_PERCEPTION_FLAG_TURN_L = _base.RDB_DRIVER_PERCEPTION_FLAG_TURN_L
RDB_DRIVER_PERCEPTION_FLAG_TURN_R = _base.RDB_DRIVER_PERCEPTION_FLAG_TURN_R
RDB_DRIVER_INPUT_VALIDITY_NONE = _base.RDB_DRIVER_INPUT_VALIDITY_NONE
RDB_DRIVER_INPUT_VALIDITY_STEERING_WHEEL = _base.RDB_DRIVER_INPUT_VALIDITY_STEERING_WHEEL
RDB_DRIVER_INPUT_VALIDITY_STEERING_SPEED = _base.RDB_DRIVER_INPUT_VALIDITY_STEERING_SPEED
RDB_DRIVER_INPUT_VALIDITY_THROTTLE = _base.RDB_DRIVER_INPUT_VALIDITY_THROTTLE
RDB_DRIVER_INPUT_VALIDITY_BRAKE = _base.RDB_DRIVER_INPUT_VALIDITY_BRAKE
RDB_DRIVER_INPUT_VALIDITY_CLUTCH = _base.RDB_DRIVER_INPUT_VALIDITY_CLUTCH
RDB_DRIVER_INPUT_VALIDITY_TGT_ACCEL = _base.RDB_DRIVER_INPUT_VALIDITY_TGT_ACCEL
RDB_DRIVER_INPUT_VALIDITY_TGT_STEERING = _base.RDB_DRIVER_INPUT_VALIDITY_TGT_STEERING
RDB_DRIVER_INPUT_VALIDITY_GEAR = _base.RDB_DRIVER_INPUT_VALIDITY_GEAR
RDB_DRIVER_INPUT_VALIDITY_CURVATURE = _base.RDB_DRIVER_INPUT_VALIDITY_CURVATURE
RDB_DRIVER_INPUT_VALIDITY_STEERING_TORQUE = _base.RDB_DRIVER_INPUT_VALIDITY_STEERING_TORQUE
RDB_DRIVER_INPUT_VALIDITY_ENGINE_TORQUE = _base.RDB_DRIVER_INPUT_VALIDITY_ENGINE_TORQUE
RDB_DRIVER_INPUT_VALIDITY_TGT_SPEED = _base.RDB_DRIVER_INPUT_VALIDITY_TGT_SPEED
RDB_DRIVER_INPUT_VALIDITY_INFO_ONLY = _base.RDB_DRIVER_INPUT_VALIDITY_INFO_ONLY
RDB_DRIVER_INPUT_VALIDITY_ADD_ON = _base.RDB_DRIVER_INPUT_VALIDITY_ADD_ON
RDB_DRIVER_INPUT_VALIDITY_FLAGS = _base.RDB_DRIVER_INPUT_VALIDITY_FLAGS
RDB_DRIVER_INPUT_VALIDITY_MOCKUP_INPUT0 = _base.RDB_DRIVER_INPUT_VALIDITY_MOCKUP_INPUT0
RDB_DRIVER_INPUT_VALIDITY_MOCKUP_INPUT1 = _base.RDB_DRIVER_INPUT_VALIDITY_MOCKUP_INPUT1
RDB_DRIVER_INPUT_VALIDITY_MOCKUP_INPUT2 = _base.RDB_DRIVER_INPUT_VALIDITY_MOCKUP_INPUT2
RDB_DRIVER_INPUT_VALIDITY_STEERING_TPOS = _base.RDB_DRIVER_INPUT_VALIDITY_STEERING_TPOS
RDB_DRIVER_INPUT_VALIDITY_MODIFIED = _base.RDB_DRIVER_INPUT_VALIDITY_MODIFIED
RDB_SCORING_FLAG_NONE = _base.RDB_SCORING_FLAG_NONE
RDB_SCORING_FLAG_COLLISION = _base.RDB_SCORING_FLAG_COLLISION
RDB_SCORING_FLAG_OFF_ROAD = _base.RDB_SCORING_FLAG_OFF_ROAD
RDB_COORD_FLAG_NONE = _base.RDB_COORD_FLAG_NONE
RDB_COORD_FLAG_POINT_VALID = _base.RDB_COORD_FLAG_POINT_VALID
RDB_COORD_FLAG_ANGLES_VALID = _base.RDB_COORD_FLAG_ANGLES_VALID
RDB_LIGHT_SOURCE_FLAG_NONE = _base.RDB_LIGHT_SOURCE_FLAG_NONE
RDB_LIGHT_SOURCE_FLAG_USE_FRUSTUM = _base.RDB_LIGHT_SOURCE_FLAG_USE_FRUSTUM
RDB_LIGHT_SOURCE_FLAG_PERSISTENT = _base.RDB_LIGHT_SOURCE_FLAG_PERSISTENT
RDB_LIGHT_SOURCE_FLAG_STENCIL = _base.RDB_LIGHT_SOURCE_FLAG_STENCIL
RDB_SENSOR_OBJECT_FLAG_NONE = _base.RDB_SENSOR_OBJECT_FLAG_NONE
RDB_SENSOR_OBJECT_FLAG_CRITICALITY_LOW = _base.RDB_SENSOR_OBJECT_FLAG_CRITICALITY_LOW
RDB_SENSOR_OBJECT_FLAG_CRITICALITY_MEDIUM = _base.RDB_SENSOR_OBJECT_FLAG_CRITICALITY_MEDIUM
RDB_SENSOR_OBJECT_FLAG_CRITICALITY_HIGH = _base.RDB_SENSOR_OBJECT_FLAG_CRITICALITY_HIGH
RDB_SENSOR_OBJECT_FLAG_LANE_POS_VALID = _base.RDB_SENSOR_OBJECT_FLAG_LANE_POS_VALID
RDB_ROAD_EVENT_NONE = _base.RDB_ROAD_EVENT_NONE
RDB_ROAD_EVENT_POTHOLE = _base.RDB_ROAD_EVENT_POTHOLE
RDB_ENV_FLAG_NONE = _base.RDB_ENV_FLAG_NONE
RDB_ENV_FLAG_PRECIPITATION_SNOW = _base.RDB_ENV_FLAG_PRECIPITATION_SNOW
RDB_ENV_FLAG_PRECIPITATION_HAIL = _base.RDB_ENV_FLAG_PRECIPITATION_HAIL
RDB_ENV_FLAG_ROAD_SURFACE_WET = _base.RDB_ENV_FLAG_ROAD_SURFACE_WET
RDB_ENV_FLAG_STREET_LAMPS = _base.RDB_ENV_FLAG_STREET_LAMPS
RDB_SHM_ID_IMG_GENERATOR_OUT = _base.RDB_SHM_ID_IMG_GENERATOR_OUT
RDB_SHM_ID_IMG_GENERATOR_IN = _base.RDB_SHM_ID_IMG_GENERATOR_IN
RDB_SHM_ID_CONTROL_GENERATOR_IN = _base.RDB_SHM_ID_CONTROL_GENERATOR_IN
RDB_SHM_ID_CUSTOM_01 = _base.RDB_SHM_ID_CUSTOM_01
RDB_SHM_ID_TC_IN = _base.RDB_SHM_ID_TC_IN
RDB_SHM_ID_TC_OUT = _base.RDB_SHM_ID_TC_OUT
RDB_SHM_ID_DYN_2_STEER = _base.RDB_SHM_ID_DYN_2_STEER
RDB_SHM_ID_STEER_2_DYN = _base.RDB_SHM_ID_STEER_2_DYN
RDB_SHM_BUFFER_FLAG_NONE = _base.RDB_SHM_BUFFER_FLAG_NONE
RDB_SHM_BUFFER_FLAG_LOCK = _base.RDB_SHM_BUFFER_FLAG_LOCK
RDB_SHM_BUFFER_FLAG_TC = _base.RDB_SHM_BUFFER_FLAG_TC
RDB_SHM_BUFFER_FLAG_IG = _base.RDB_SHM_BUFFER_FLAG_IG
RDB_OBJECT_CFG_FLAG_NONE = _base.RDB_OBJECT_CFG_FLAG_NONE
RDB_OBJECT_CFG_FLAG_CTRL_EXTERN = _base.RDB_OBJECT_CFG_FLAG_CTRL_EXTERN
RDB_OBJECT_CFG_FLAG_MODEL_ID_VALID = _base.RDB_OBJECT_CFG_FLAG_MODEL_ID_VALID
RDB_OBJECT_CFG_FLAG_FOREIGNER = _base.RDB_OBJECT_CFG_FLAG_FOREIGNER
RDB_OBJECT_CFG_FLAG_AUTO_SCALE = _base.RDB_OBJECT_CFG_FLAG_AUTO_SCALE
RDB_ROAD_POS_FLAG_NONE = _base.RDB_ROAD_POS_FLAG_NONE
RDB_ROAD_POS_FLAG_DIR_FWD = _base.RDB_ROAD_POS_FLAG_DIR_FWD
RDB_ROAD_POS_FLAG_DIR_REAR = _base.RDB_ROAD_POS_FLAG_DIR_REAR
RDB_ROAD_POS_FLAG_OFFROAD = _base.RDB_ROAD_POS_FLAG_OFFROAD
RDB_CONTACT_POINT_FLAG_NONE = _base.RDB_CONTACT_POINT_FLAG_NONE
RDB_CONTACT_POINT_FLAG_PLAYER_VALID = _base.RDB_CONTACT_POINT_FLAG_PLAYER_VALID
RDB_SYNC_CMD_RENDER_CONTINUOUS = _base.RDB_SYNC_CMD_RENDER_CONTINUOUS
RDB_SYNC_CMD_RENDER_PAUSE = _base.RDB_SYNC_CMD_RENDER_PAUSE
RDB_SYNC_CMD_RENDER_SINGLE_FRAME = _base.RDB_SYNC_CMD_RENDER_SINGLE_FRAME
RDB_SYNC_CMD_RENDER_TARGET_FRAME = _base.RDB_SYNC_CMD_RENDER_TARGET_FRAME
RDB_TRAJECTORY_FLAG_NONE = _base.RDB_TRAJECTORY_FLAG_NONE
RDB_TRAJECTORY_FLAG_TIME_DOMAIN = _base.RDB_TRAJECTORY_FLAG_TIME_DOMAIN
RDB_DYN_2_STEER_STATE_NONE = _base.RDB_DYN_2_STEER_STATE_NONE
RDB_DYN_2_STEER_STATE_PAUSE = _base.RDB_DYN_2_STEER_STATE_PAUSE
RDB_DYN_2_STEER_STATE_RUN = _base.RDB_DYN_2_STEER_STATE_RUN
RDB_DYN_2_STEER_STATE_ERROR = _base.RDB_DYN_2_STEER_STATE_ERROR
RDB_DYN_2_STEER_CMD_NONE = _base.RDB_DYN_2_STEER_CMD_NONE
RDB_DYN_2_STEER_CMD_RESET = _base.RDB_DYN_2_STEER_CMD_RESET
RDB_DYN_2_STEER_EFFECT_NONE = _base.RDB_DYN_2_STEER_EFFECT_NONE
RDB_DYN_2_STEER_EFFECT_TIRE_MODEL = _base.RDB_DYN_2_STEER_EFFECT_TIRE_MODEL
RDB_DYN_2_STEER_EFFECT_VIBRATION_10HZ = _base.RDB_DYN_2_STEER_EFFECT_VIBRATION_10HZ
RDB_STEER_2_DYN_STATE_OFF = _base.RDB_STEER_2_DYN_STATE_OFF
RDB_STEER_2_DYN_STATE_INIT = _base.RDB_STEER_2_DYN_STATE_INIT
RDB_STEER_2_DYN_STATE_FAIL = _base.RDB_STEER_2_DYN_STATE_FAIL
RDB_STEER_2_DYN_STATE_RUN = _base.RDB_STEER_2_DYN_STATE_RUN
RDB_STEER_2_DYN_STATE_OVER_LIMITS = _base.RDB_STEER_2_DYN_STATE_OVER_LIMITS
RDB_WHEEL_FLAG_NONE = _base.RDB_WHEEL_FLAG_NONE
RDB_WHEEL_FLAG_ON_ROADMARK = _base.RDB_WHEEL_FLAG_ON_ROADMARK
RDB_MOTION_SYSTEM_FLAG_NONE = _base.RDB_MOTION_SYSTEM_FLAG_NONE
RDB_MOTION_SYSTEM_FLAG_ACTIVE = _base.RDB_MOTION_SYSTEM_FLAG_ACTIVE
RDB_MOTION_SYSTEM_FLAG_ERROR = _base.RDB_MOTION_SYSTEM_FLAG_ERROR
RDB_CUSTOM_TRACK_CTRL_FLAG_VIS_SENSOR_A = _base.RDB_CUSTOM_TRACK_CTRL_FLAG_VIS_SENSOR_A
RDB_CUSTOM_TRACK_CTRL_FLAG_VIS_SENSOR_B = _base.RDB_CUSTOM_TRACK_CTRL_FLAG_VIS_SENSOR_B
RDB_CUSTOM_TRACK_CTRL_FLAG_VIS_GFX = _base.RDB_CUSTOM_TRACK_CTRL_FLAG_VIS_GFX
RDB_CUSTOM_TRACK_CTRL_FLAG_VIS_SENSOR_C = _base.RDB_CUSTOM_TRACK_CTRL_FLAG_VIS_SENSOR_C
RDB_CUSTOM_TRACK_CTRL_FLAG_VIS_SENSOR_D = _base.RDB_CUSTOM_TRACK_CTRL_FLAG_VIS_SENSOR_D
RDB_CUSTOM_TRACK_CTRL_FLAG_NAME_BY_ID = _base.RDB_CUSTOM_TRACK_CTRL_FLAG_NAME_BY_ID
RDB_CUSTOM_TRACK_CTRL_FLAG_PLAYER_ACTIVE = _base.RDB_CUSTOM_TRACK_CTRL_FLAG_PLAYER_ACTIVE
RDB_CUSTOM_TRACK_CTRL_FLAG_DIRECT_MODE = _base.RDB_CUSTOM_TRACK_CTRL_FLAG_DIRECT_MODE
RDB_CUSTOM_TRACK_CTRL_VALIDITY_DEFAULT = _base.RDB_CUSTOM_TRACK_CTRL_VALIDITY_DEFAULT
RDB_CUSTOM_TRACK_CTRL_VALIDITY_TGT_ACCEL = _base.RDB_CUSTOM_TRACK_CTRL_VALIDITY_TGT_ACCEL
RDB_CUSTOM_TRACK_CTRL_VALIDITY_STEERING_TPOS = _base.RDB_CUSTOM_TRACK_CTRL_VALIDITY_STEERING_TPOS
RDB_ROAD_QUERY_FLAG_NONE = _base.RDB_ROAD_QUERY_FLAG_NONE
RDB_ROAD_QUERY_FLAG_RELATIVE_POS = _base.RDB_ROAD_QUERY_FLAG_RELATIVE_POS
class RDB_POINT_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_base.RDB_POINT_t_x_get, _base.RDB_POINT_t_x_set)
    y = property(_base.RDB_POINT_t_y_get, _base.RDB_POINT_t_y_set)
    z = property(_base.RDB_POINT_t_z_get, _base.RDB_POINT_t_z_set)
    flags = property(_base.RDB_POINT_t_flags_get, _base.RDB_POINT_t_flags_set)
    type = property(_base.RDB_POINT_t_type_get, _base.RDB_POINT_t_type_set)
    system = property(_base.RDB_POINT_t_system_get, _base.RDB_POINT_t_system_set)

    def __init__(self):
        _base.RDB_POINT_t_swiginit(self, _base.new_RDB_POINT_t())
    __swig_destroy__ = _base.delete_RDB_POINT_t

# Register RDB_POINT_t in _base:
_base.RDB_POINT_t_swigregister(RDB_POINT_t)

class RDB_COORD_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_base.RDB_COORD_t_x_get, _base.RDB_COORD_t_x_set)
    y = property(_base.RDB_COORD_t_y_get, _base.RDB_COORD_t_y_set)
    z = property(_base.RDB_COORD_t_z_get, _base.RDB_COORD_t_z_set)
    h = property(_base.RDB_COORD_t_h_get, _base.RDB_COORD_t_h_set)
    p = property(_base.RDB_COORD_t_p_get, _base.RDB_COORD_t_p_set)
    r = property(_base.RDB_COORD_t_r_get, _base.RDB_COORD_t_r_set)
    flags = property(_base.RDB_COORD_t_flags_get, _base.RDB_COORD_t_flags_set)
    type = property(_base.RDB_COORD_t_type_get, _base.RDB_COORD_t_type_set)
    system = property(_base.RDB_COORD_t_system_get, _base.RDB_COORD_t_system_set)

    def __init__(self):
        _base.RDB_COORD_t_swiginit(self, _base.new_RDB_COORD_t())
    __swig_destroy__ = _base.delete_RDB_COORD_t

# Register RDB_COORD_t in _base:
_base.RDB_COORD_t_swigregister(RDB_COORD_t)

class RDB_COORD_SYSTEM_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_COORD_SYSTEM_t_id_get, _base.RDB_COORD_SYSTEM_t_id_set)
    spare = property(_base.RDB_COORD_SYSTEM_t_spare_get, _base.RDB_COORD_SYSTEM_t_spare_set)
    pos = property(_base.RDB_COORD_SYSTEM_t_pos_get, _base.RDB_COORD_SYSTEM_t_pos_set)

    def __init__(self):
        _base.RDB_COORD_SYSTEM_t_swiginit(self, _base.new_RDB_COORD_SYSTEM_t())
    __swig_destroy__ = _base.delete_RDB_COORD_SYSTEM_t

# Register RDB_COORD_SYSTEM_t in _base:
_base.RDB_COORD_SYSTEM_t_swigregister(RDB_COORD_SYSTEM_t)

class RDB_ROAD_POS_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_ROAD_POS_t_playerId_get, _base.RDB_ROAD_POS_t_playerId_set)
    roadId = property(_base.RDB_ROAD_POS_t_roadId_get, _base.RDB_ROAD_POS_t_roadId_set)
    laneId = property(_base.RDB_ROAD_POS_t_laneId_get, _base.RDB_ROAD_POS_t_laneId_set)
    flags = property(_base.RDB_ROAD_POS_t_flags_get, _base.RDB_ROAD_POS_t_flags_set)
    roadS = property(_base.RDB_ROAD_POS_t_roadS_get, _base.RDB_ROAD_POS_t_roadS_set)
    roadT = property(_base.RDB_ROAD_POS_t_roadT_get, _base.RDB_ROAD_POS_t_roadT_set)
    laneOffset = property(_base.RDB_ROAD_POS_t_laneOffset_get, _base.RDB_ROAD_POS_t_laneOffset_set)
    hdgRel = property(_base.RDB_ROAD_POS_t_hdgRel_get, _base.RDB_ROAD_POS_t_hdgRel_set)
    pitchRel = property(_base.RDB_ROAD_POS_t_pitchRel_get, _base.RDB_ROAD_POS_t_pitchRel_set)
    rollRel = property(_base.RDB_ROAD_POS_t_rollRel_get, _base.RDB_ROAD_POS_t_rollRel_set)
    roadType = property(_base.RDB_ROAD_POS_t_roadType_get, _base.RDB_ROAD_POS_t_roadType_set)
    spare1 = property(_base.RDB_ROAD_POS_t_spare1_get, _base.RDB_ROAD_POS_t_spare1_set)
    spare2 = property(_base.RDB_ROAD_POS_t_spare2_get, _base.RDB_ROAD_POS_t_spare2_set)
    pathS = property(_base.RDB_ROAD_POS_t_pathS_get, _base.RDB_ROAD_POS_t_pathS_set)

    def __init__(self):
        _base.RDB_ROAD_POS_t_swiginit(self, _base.new_RDB_ROAD_POS_t())
    __swig_destroy__ = _base.delete_RDB_ROAD_POS_t

# Register RDB_ROAD_POS_t in _base:
_base.RDB_ROAD_POS_t_swigregister(RDB_ROAD_POS_t)

class RDB_ROADMARK_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_ROADMARK_t_playerId_get, _base.RDB_ROADMARK_t_playerId_set)
    id = property(_base.RDB_ROADMARK_t_id_get, _base.RDB_ROADMARK_t_id_set)
    prevId = property(_base.RDB_ROADMARK_t_prevId_get, _base.RDB_ROADMARK_t_prevId_set)
    nextId = property(_base.RDB_ROADMARK_t_nextId_get, _base.RDB_ROADMARK_t_nextId_set)
    laneId = property(_base.RDB_ROADMARK_t_laneId_get, _base.RDB_ROADMARK_t_laneId_set)
    lateralDist = property(_base.RDB_ROADMARK_t_lateralDist_get, _base.RDB_ROADMARK_t_lateralDist_set)
    yawRel = property(_base.RDB_ROADMARK_t_yawRel_get, _base.RDB_ROADMARK_t_yawRel_set)
    curvHor = property(_base.RDB_ROADMARK_t_curvHor_get, _base.RDB_ROADMARK_t_curvHor_set)
    curvHorDot = property(_base.RDB_ROADMARK_t_curvHorDot_get, _base.RDB_ROADMARK_t_curvHorDot_set)
    startDx = property(_base.RDB_ROADMARK_t_startDx_get, _base.RDB_ROADMARK_t_startDx_set)
    previewDx = property(_base.RDB_ROADMARK_t_previewDx_get, _base.RDB_ROADMARK_t_previewDx_set)
    width = property(_base.RDB_ROADMARK_t_width_get, _base.RDB_ROADMARK_t_width_set)
    height = property(_base.RDB_ROADMARK_t_height_get, _base.RDB_ROADMARK_t_height_set)
    curvVert = property(_base.RDB_ROADMARK_t_curvVert_get, _base.RDB_ROADMARK_t_curvVert_set)
    curvVertDot = property(_base.RDB_ROADMARK_t_curvVertDot_get, _base.RDB_ROADMARK_t_curvVertDot_set)
    type = property(_base.RDB_ROADMARK_t_type_get, _base.RDB_ROADMARK_t_type_set)
    color = property(_base.RDB_ROADMARK_t_color_get, _base.RDB_ROADMARK_t_color_set)
    noDataPoints = property(_base.RDB_ROADMARK_t_noDataPoints_get, _base.RDB_ROADMARK_t_noDataPoints_set)
    roadId = property(_base.RDB_ROADMARK_t_roadId_get, _base.RDB_ROADMARK_t_roadId_set)
    spare1 = property(_base.RDB_ROADMARK_t_spare1_get, _base.RDB_ROADMARK_t_spare1_set)

    def __init__(self):
        _base.RDB_ROADMARK_t_swiginit(self, _base.new_RDB_ROADMARK_t())
    __swig_destroy__ = _base.delete_RDB_ROADMARK_t

# Register RDB_ROADMARK_t in _base:
_base.RDB_ROADMARK_t_swigregister(RDB_ROADMARK_t)

class RDB_LANE_INFO_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    roadId = property(_base.RDB_LANE_INFO_t_roadId_get, _base.RDB_LANE_INFO_t_roadId_set)
    id = property(_base.RDB_LANE_INFO_t_id_get, _base.RDB_LANE_INFO_t_id_set)
    neighborMask = property(_base.RDB_LANE_INFO_t_neighborMask_get, _base.RDB_LANE_INFO_t_neighborMask_set)
    leftLaneId = property(_base.RDB_LANE_INFO_t_leftLaneId_get, _base.RDB_LANE_INFO_t_leftLaneId_set)
    rightLaneId = property(_base.RDB_LANE_INFO_t_rightLaneId_get, _base.RDB_LANE_INFO_t_rightLaneId_set)
    borderType = property(_base.RDB_LANE_INFO_t_borderType_get, _base.RDB_LANE_INFO_t_borderType_set)
    material = property(_base.RDB_LANE_INFO_t_material_get, _base.RDB_LANE_INFO_t_material_set)
    status = property(_base.RDB_LANE_INFO_t_status_get, _base.RDB_LANE_INFO_t_status_set)
    type = property(_base.RDB_LANE_INFO_t_type_get, _base.RDB_LANE_INFO_t_type_set)
    width = property(_base.RDB_LANE_INFO_t_width_get, _base.RDB_LANE_INFO_t_width_set)
    curvVert = property(_base.RDB_LANE_INFO_t_curvVert_get, _base.RDB_LANE_INFO_t_curvVert_set)
    curvVertDot = property(_base.RDB_LANE_INFO_t_curvVertDot_get, _base.RDB_LANE_INFO_t_curvVertDot_set)
    curvHor = property(_base.RDB_LANE_INFO_t_curvHor_get, _base.RDB_LANE_INFO_t_curvHor_set)
    curvHorDot = property(_base.RDB_LANE_INFO_t_curvHorDot_get, _base.RDB_LANE_INFO_t_curvHorDot_set)
    playerId = property(_base.RDB_LANE_INFO_t_playerId_get, _base.RDB_LANE_INFO_t_playerId_set)
    spare1 = property(_base.RDB_LANE_INFO_t_spare1_get, _base.RDB_LANE_INFO_t_spare1_set)

    def __init__(self):
        _base.RDB_LANE_INFO_t_swiginit(self, _base.new_RDB_LANE_INFO_t())
    __swig_destroy__ = _base.delete_RDB_LANE_INFO_t

# Register RDB_LANE_INFO_t in _base:
_base.RDB_LANE_INFO_t_swigregister(RDB_LANE_INFO_t)

class RDB_OBJECT_CFG_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_OBJECT_CFG_t_id_get, _base.RDB_OBJECT_CFG_t_id_set)
    category = property(_base.RDB_OBJECT_CFG_t_category_get, _base.RDB_OBJECT_CFG_t_category_set)
    type = property(_base.RDB_OBJECT_CFG_t_type_get, _base.RDB_OBJECT_CFG_t_type_set)
    modelId = property(_base.RDB_OBJECT_CFG_t_modelId_get, _base.RDB_OBJECT_CFG_t_modelId_set)
    name = property(_base.RDB_OBJECT_CFG_t_name_get, _base.RDB_OBJECT_CFG_t_name_set)
    modelName = property(_base.RDB_OBJECT_CFG_t_modelName_get, _base.RDB_OBJECT_CFG_t_modelName_set)
    fileName = property(_base.RDB_OBJECT_CFG_t_fileName_get, _base.RDB_OBJECT_CFG_t_fileName_set)
    flags = property(_base.RDB_OBJECT_CFG_t_flags_get, _base.RDB_OBJECT_CFG_t_flags_set)
    spare0 = property(_base.RDB_OBJECT_CFG_t_spare0_get, _base.RDB_OBJECT_CFG_t_spare0_set)
    spare1 = property(_base.RDB_OBJECT_CFG_t_spare1_get, _base.RDB_OBJECT_CFG_t_spare1_set)

    def __init__(self):
        _base.RDB_OBJECT_CFG_t_swiginit(self, _base.new_RDB_OBJECT_CFG_t())
    __swig_destroy__ = _base.delete_RDB_OBJECT_CFG_t

# Register RDB_OBJECT_CFG_t in _base:
_base.RDB_OBJECT_CFG_t_swigregister(RDB_OBJECT_CFG_t)

class RDB_GEOMETRY_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimX = property(_base.RDB_GEOMETRY_t_dimX_get, _base.RDB_GEOMETRY_t_dimX_set)
    dimY = property(_base.RDB_GEOMETRY_t_dimY_get, _base.RDB_GEOMETRY_t_dimY_set)
    dimZ = property(_base.RDB_GEOMETRY_t_dimZ_get, _base.RDB_GEOMETRY_t_dimZ_set)
    offX = property(_base.RDB_GEOMETRY_t_offX_get, _base.RDB_GEOMETRY_t_offX_set)
    offY = property(_base.RDB_GEOMETRY_t_offY_get, _base.RDB_GEOMETRY_t_offY_set)
    offZ = property(_base.RDB_GEOMETRY_t_offZ_get, _base.RDB_GEOMETRY_t_offZ_set)

    def __init__(self):
        _base.RDB_GEOMETRY_t_swiginit(self, _base.new_RDB_GEOMETRY_t())
    __swig_destroy__ = _base.delete_RDB_GEOMETRY_t

# Register RDB_GEOMETRY_t in _base:
_base.RDB_GEOMETRY_t_swigregister(RDB_GEOMETRY_t)

class RDB_OBJECT_STATE_BASE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_OBJECT_STATE_BASE_t_id_get, _base.RDB_OBJECT_STATE_BASE_t_id_set)
    category = property(_base.RDB_OBJECT_STATE_BASE_t_category_get, _base.RDB_OBJECT_STATE_BASE_t_category_set)
    type = property(_base.RDB_OBJECT_STATE_BASE_t_type_get, _base.RDB_OBJECT_STATE_BASE_t_type_set)
    visMask = property(_base.RDB_OBJECT_STATE_BASE_t_visMask_get, _base.RDB_OBJECT_STATE_BASE_t_visMask_set)
    name = property(_base.RDB_OBJECT_STATE_BASE_t_name_get, _base.RDB_OBJECT_STATE_BASE_t_name_set)
    geo = property(_base.RDB_OBJECT_STATE_BASE_t_geo_get, _base.RDB_OBJECT_STATE_BASE_t_geo_set)
    pos = property(_base.RDB_OBJECT_STATE_BASE_t_pos_get, _base.RDB_OBJECT_STATE_BASE_t_pos_set)
    parent = property(_base.RDB_OBJECT_STATE_BASE_t_parent_get, _base.RDB_OBJECT_STATE_BASE_t_parent_set)
    cfgFlags = property(_base.RDB_OBJECT_STATE_BASE_t_cfgFlags_get, _base.RDB_OBJECT_STATE_BASE_t_cfgFlags_set)
    cfgModelId = property(_base.RDB_OBJECT_STATE_BASE_t_cfgModelId_get, _base.RDB_OBJECT_STATE_BASE_t_cfgModelId_set)

    def __init__(self):
        _base.RDB_OBJECT_STATE_BASE_t_swiginit(self, _base.new_RDB_OBJECT_STATE_BASE_t())
    __swig_destroy__ = _base.delete_RDB_OBJECT_STATE_BASE_t

# Register RDB_OBJECT_STATE_BASE_t in _base:
_base.RDB_OBJECT_STATE_BASE_t_swigregister(RDB_OBJECT_STATE_BASE_t)

class RDB_OBJECT_STATE_EXT_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    speed = property(_base.RDB_OBJECT_STATE_EXT_t_speed_get, _base.RDB_OBJECT_STATE_EXT_t_speed_set)
    accel = property(_base.RDB_OBJECT_STATE_EXT_t_accel_get, _base.RDB_OBJECT_STATE_EXT_t_accel_set)
    traveledDist = property(_base.RDB_OBJECT_STATE_EXT_t_traveledDist_get, _base.RDB_OBJECT_STATE_EXT_t_traveledDist_set)
    spare = property(_base.RDB_OBJECT_STATE_EXT_t_spare_get, _base.RDB_OBJECT_STATE_EXT_t_spare_set)

    def __init__(self):
        _base.RDB_OBJECT_STATE_EXT_t_swiginit(self, _base.new_RDB_OBJECT_STATE_EXT_t())
    __swig_destroy__ = _base.delete_RDB_OBJECT_STATE_EXT_t

# Register RDB_OBJECT_STATE_EXT_t in _base:
_base.RDB_OBJECT_STATE_EXT_t_swigregister(RDB_OBJECT_STATE_EXT_t)

class RDB_OBJECT_STATE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    base = property(_base.RDB_OBJECT_STATE_t_base_get, _base.RDB_OBJECT_STATE_t_base_set)
    ext = property(_base.RDB_OBJECT_STATE_t_ext_get, _base.RDB_OBJECT_STATE_t_ext_set)

    def __init__(self):
        _base.RDB_OBJECT_STATE_t_swiginit(self, _base.new_RDB_OBJECT_STATE_t())
    __swig_destroy__ = _base.delete_RDB_OBJECT_STATE_t

# Register RDB_OBJECT_STATE_t in _base:
_base.RDB_OBJECT_STATE_t_swigregister(RDB_OBJECT_STATE_t)

class RDB_ENGINE_BASE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_ENGINE_BASE_t_playerId_get, _base.RDB_ENGINE_BASE_t_playerId_set)
    rps = property(_base.RDB_ENGINE_BASE_t_rps_get, _base.RDB_ENGINE_BASE_t_rps_set)
    load = property(_base.RDB_ENGINE_BASE_t_load_get, _base.RDB_ENGINE_BASE_t_load_set)
    spare1 = property(_base.RDB_ENGINE_BASE_t_spare1_get, _base.RDB_ENGINE_BASE_t_spare1_set)

    def __init__(self):
        _base.RDB_ENGINE_BASE_t_swiginit(self, _base.new_RDB_ENGINE_BASE_t())
    __swig_destroy__ = _base.delete_RDB_ENGINE_BASE_t

# Register RDB_ENGINE_BASE_t in _base:
_base.RDB_ENGINE_BASE_t_swigregister(RDB_ENGINE_BASE_t)

class RDB_ENGINE_EXT_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rpsStart = property(_base.RDB_ENGINE_EXT_t_rpsStart_get, _base.RDB_ENGINE_EXT_t_rpsStart_set)
    torque = property(_base.RDB_ENGINE_EXT_t_torque_get, _base.RDB_ENGINE_EXT_t_torque_set)
    torqueInner = property(_base.RDB_ENGINE_EXT_t_torqueInner_get, _base.RDB_ENGINE_EXT_t_torqueInner_set)
    torqueMax = property(_base.RDB_ENGINE_EXT_t_torqueMax_get, _base.RDB_ENGINE_EXT_t_torqueMax_set)
    torqueFriction = property(_base.RDB_ENGINE_EXT_t_torqueFriction_get, _base.RDB_ENGINE_EXT_t_torqueFriction_set)
    fuelCurrent = property(_base.RDB_ENGINE_EXT_t_fuelCurrent_get, _base.RDB_ENGINE_EXT_t_fuelCurrent_set)
    fuelAverage = property(_base.RDB_ENGINE_EXT_t_fuelAverage_get, _base.RDB_ENGINE_EXT_t_fuelAverage_set)
    oilTemperature = property(_base.RDB_ENGINE_EXT_t_oilTemperature_get, _base.RDB_ENGINE_EXT_t_oilTemperature_set)
    temperature = property(_base.RDB_ENGINE_EXT_t_temperature_get, _base.RDB_ENGINE_EXT_t_temperature_set)

    def __init__(self):
        _base.RDB_ENGINE_EXT_t_swiginit(self, _base.new_RDB_ENGINE_EXT_t())
    __swig_destroy__ = _base.delete_RDB_ENGINE_EXT_t

# Register RDB_ENGINE_EXT_t in _base:
_base.RDB_ENGINE_EXT_t_swigregister(RDB_ENGINE_EXT_t)

class RDB_ENGINE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    base = property(_base.RDB_ENGINE_t_base_get, _base.RDB_ENGINE_t_base_set)
    ext = property(_base.RDB_ENGINE_t_ext_get, _base.RDB_ENGINE_t_ext_set)

    def __init__(self):
        _base.RDB_ENGINE_t_swiginit(self, _base.new_RDB_ENGINE_t())
    __swig_destroy__ = _base.delete_RDB_ENGINE_t

# Register RDB_ENGINE_t in _base:
_base.RDB_ENGINE_t_swigregister(RDB_ENGINE_t)

class RDB_DRIVETRAIN_BASE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_DRIVETRAIN_BASE_t_playerId_get, _base.RDB_DRIVETRAIN_BASE_t_playerId_set)
    gearBoxType = property(_base.RDB_DRIVETRAIN_BASE_t_gearBoxType_get, _base.RDB_DRIVETRAIN_BASE_t_gearBoxType_set)
    driveTrainType = property(_base.RDB_DRIVETRAIN_BASE_t_driveTrainType_get, _base.RDB_DRIVETRAIN_BASE_t_driveTrainType_set)
    gear = property(_base.RDB_DRIVETRAIN_BASE_t_gear_get, _base.RDB_DRIVETRAIN_BASE_t_gear_set)
    spare0 = property(_base.RDB_DRIVETRAIN_BASE_t_spare0_get, _base.RDB_DRIVETRAIN_BASE_t_spare0_set)
    spare1 = property(_base.RDB_DRIVETRAIN_BASE_t_spare1_get, _base.RDB_DRIVETRAIN_BASE_t_spare1_set)

    def __init__(self):
        _base.RDB_DRIVETRAIN_BASE_t_swiginit(self, _base.new_RDB_DRIVETRAIN_BASE_t())
    __swig_destroy__ = _base.delete_RDB_DRIVETRAIN_BASE_t

# Register RDB_DRIVETRAIN_BASE_t in _base:
_base.RDB_DRIVETRAIN_BASE_t_swigregister(RDB_DRIVETRAIN_BASE_t)

class RDB_DRIVETRAIN_EXT_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    torqueGearBoxIn = property(_base.RDB_DRIVETRAIN_EXT_t_torqueGearBoxIn_get, _base.RDB_DRIVETRAIN_EXT_t_torqueGearBoxIn_set)
    torqueCenterDiffOut = property(_base.RDB_DRIVETRAIN_EXT_t_torqueCenterDiffOut_get, _base.RDB_DRIVETRAIN_EXT_t_torqueCenterDiffOut_set)
    torqueShaft = property(_base.RDB_DRIVETRAIN_EXT_t_torqueShaft_get, _base.RDB_DRIVETRAIN_EXT_t_torqueShaft_set)
    spare1 = property(_base.RDB_DRIVETRAIN_EXT_t_spare1_get, _base.RDB_DRIVETRAIN_EXT_t_spare1_set)

    def __init__(self):
        _base.RDB_DRIVETRAIN_EXT_t_swiginit(self, _base.new_RDB_DRIVETRAIN_EXT_t())
    __swig_destroy__ = _base.delete_RDB_DRIVETRAIN_EXT_t

# Register RDB_DRIVETRAIN_EXT_t in _base:
_base.RDB_DRIVETRAIN_EXT_t_swigregister(RDB_DRIVETRAIN_EXT_t)

class RDB_DRIVETRAIN_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    base = property(_base.RDB_DRIVETRAIN_t_base_get, _base.RDB_DRIVETRAIN_t_base_set)
    ext = property(_base.RDB_DRIVETRAIN_t_ext_get, _base.RDB_DRIVETRAIN_t_ext_set)

    def __init__(self):
        _base.RDB_DRIVETRAIN_t_swiginit(self, _base.new_RDB_DRIVETRAIN_t())
    __swig_destroy__ = _base.delete_RDB_DRIVETRAIN_t

# Register RDB_DRIVETRAIN_t in _base:
_base.RDB_DRIVETRAIN_t_swigregister(RDB_DRIVETRAIN_t)

class RDB_WHEEL_BASE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_WHEEL_BASE_t_playerId_get, _base.RDB_WHEEL_BASE_t_playerId_set)
    id = property(_base.RDB_WHEEL_BASE_t_id_get, _base.RDB_WHEEL_BASE_t_id_set)
    flags = property(_base.RDB_WHEEL_BASE_t_flags_get, _base.RDB_WHEEL_BASE_t_flags_set)
    spare0 = property(_base.RDB_WHEEL_BASE_t_spare0_get, _base.RDB_WHEEL_BASE_t_spare0_set)
    radiusStatic = property(_base.RDB_WHEEL_BASE_t_radiusStatic_get, _base.RDB_WHEEL_BASE_t_radiusStatic_set)
    springCompression = property(_base.RDB_WHEEL_BASE_t_springCompression_get, _base.RDB_WHEEL_BASE_t_springCompression_set)
    rotAngle = property(_base.RDB_WHEEL_BASE_t_rotAngle_get, _base.RDB_WHEEL_BASE_t_rotAngle_set)
    slip = property(_base.RDB_WHEEL_BASE_t_slip_get, _base.RDB_WHEEL_BASE_t_slip_set)
    steeringAngle = property(_base.RDB_WHEEL_BASE_t_steeringAngle_get, _base.RDB_WHEEL_BASE_t_steeringAngle_set)
    spare1 = property(_base.RDB_WHEEL_BASE_t_spare1_get, _base.RDB_WHEEL_BASE_t_spare1_set)

    def __init__(self):
        _base.RDB_WHEEL_BASE_t_swiginit(self, _base.new_RDB_WHEEL_BASE_t())
    __swig_destroy__ = _base.delete_RDB_WHEEL_BASE_t

# Register RDB_WHEEL_BASE_t in _base:
_base.RDB_WHEEL_BASE_t_swigregister(RDB_WHEEL_BASE_t)

class RDB_WHEEL_EXT_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vAngular = property(_base.RDB_WHEEL_EXT_t_vAngular_get, _base.RDB_WHEEL_EXT_t_vAngular_set)
    forceZ = property(_base.RDB_WHEEL_EXT_t_forceZ_get, _base.RDB_WHEEL_EXT_t_forceZ_set)
    forceLat = property(_base.RDB_WHEEL_EXT_t_forceLat_get, _base.RDB_WHEEL_EXT_t_forceLat_set)
    forceLong = property(_base.RDB_WHEEL_EXT_t_forceLong_get, _base.RDB_WHEEL_EXT_t_forceLong_set)
    forceTireWheelXYZ = property(_base.RDB_WHEEL_EXT_t_forceTireWheelXYZ_get, _base.RDB_WHEEL_EXT_t_forceTireWheelXYZ_set)
    radiusDynamic = property(_base.RDB_WHEEL_EXT_t_radiusDynamic_get, _base.RDB_WHEEL_EXT_t_radiusDynamic_set)
    brakePressure = property(_base.RDB_WHEEL_EXT_t_brakePressure_get, _base.RDB_WHEEL_EXT_t_brakePressure_set)
    torqueDriveShaft = property(_base.RDB_WHEEL_EXT_t_torqueDriveShaft_get, _base.RDB_WHEEL_EXT_t_torqueDriveShaft_set)
    damperSpeed = property(_base.RDB_WHEEL_EXT_t_damperSpeed_get, _base.RDB_WHEEL_EXT_t_damperSpeed_set)
    spare2 = property(_base.RDB_WHEEL_EXT_t_spare2_get, _base.RDB_WHEEL_EXT_t_spare2_set)

    def __init__(self):
        _base.RDB_WHEEL_EXT_t_swiginit(self, _base.new_RDB_WHEEL_EXT_t())
    __swig_destroy__ = _base.delete_RDB_WHEEL_EXT_t

# Register RDB_WHEEL_EXT_t in _base:
_base.RDB_WHEEL_EXT_t_swigregister(RDB_WHEEL_EXT_t)

class RDB_WHEEL_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    base = property(_base.RDB_WHEEL_t_base_get, _base.RDB_WHEEL_t_base_set)
    ext = property(_base.RDB_WHEEL_t_ext_get, _base.RDB_WHEEL_t_ext_set)

    def __init__(self):
        _base.RDB_WHEEL_t_swiginit(self, _base.new_RDB_WHEEL_t())
    __swig_destroy__ = _base.delete_RDB_WHEEL_t

# Register RDB_WHEEL_t in _base:
_base.RDB_WHEEL_t_swigregister(RDB_WHEEL_t)

class RDB_VEHICLE_SYSTEMS_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_VEHICLE_SYSTEMS_t_playerId_get, _base.RDB_VEHICLE_SYSTEMS_t_playerId_set)
    lightMask = property(_base.RDB_VEHICLE_SYSTEMS_t_lightMask_get, _base.RDB_VEHICLE_SYSTEMS_t_lightMask_set)
    steering = property(_base.RDB_VEHICLE_SYSTEMS_t_steering_get, _base.RDB_VEHICLE_SYSTEMS_t_steering_set)
    steeringWheelTorque = property(_base.RDB_VEHICLE_SYSTEMS_t_steeringWheelTorque_get, _base.RDB_VEHICLE_SYSTEMS_t_steeringWheelTorque_set)
    accMask = property(_base.RDB_VEHICLE_SYSTEMS_t_accMask_get, _base.RDB_VEHICLE_SYSTEMS_t_accMask_set)
    accSpeed = property(_base.RDB_VEHICLE_SYSTEMS_t_accSpeed_get, _base.RDB_VEHICLE_SYSTEMS_t_accSpeed_set)
    batteryState = property(_base.RDB_VEHICLE_SYSTEMS_t_batteryState_get, _base.RDB_VEHICLE_SYSTEMS_t_batteryState_set)
    batteryRate = property(_base.RDB_VEHICLE_SYSTEMS_t_batteryRate_get, _base.RDB_VEHICLE_SYSTEMS_t_batteryRate_set)
    displayLightMask = property(_base.RDB_VEHICLE_SYSTEMS_t_displayLightMask_get, _base.RDB_VEHICLE_SYSTEMS_t_displayLightMask_set)
    fuelGauge = property(_base.RDB_VEHICLE_SYSTEMS_t_fuelGauge_get, _base.RDB_VEHICLE_SYSTEMS_t_fuelGauge_set)
    spare = property(_base.RDB_VEHICLE_SYSTEMS_t_spare_get, _base.RDB_VEHICLE_SYSTEMS_t_spare_set)

    def __init__(self):
        _base.RDB_VEHICLE_SYSTEMS_t_swiginit(self, _base.new_RDB_VEHICLE_SYSTEMS_t())
    __swig_destroy__ = _base.delete_RDB_VEHICLE_SYSTEMS_t

# Register RDB_VEHICLE_SYSTEMS_t in _base:
_base.RDB_VEHICLE_SYSTEMS_t_swigregister(RDB_VEHICLE_SYSTEMS_t)

class RDB_VEHICLE_SETUP_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_VEHICLE_SETUP_t_playerId_get, _base.RDB_VEHICLE_SETUP_t_playerId_set)
    mass = property(_base.RDB_VEHICLE_SETUP_t_mass_get, _base.RDB_VEHICLE_SETUP_t_mass_set)
    wheelBase = property(_base.RDB_VEHICLE_SETUP_t_wheelBase_get, _base.RDB_VEHICLE_SETUP_t_wheelBase_set)
    spare = property(_base.RDB_VEHICLE_SETUP_t_spare_get, _base.RDB_VEHICLE_SETUP_t_spare_set)

    def __init__(self):
        _base.RDB_VEHICLE_SETUP_t_swiginit(self, _base.new_RDB_VEHICLE_SETUP_t())
    __swig_destroy__ = _base.delete_RDB_VEHICLE_SETUP_t

# Register RDB_VEHICLE_SETUP_t in _base:
_base.RDB_VEHICLE_SETUP_t_swigregister(RDB_VEHICLE_SETUP_t)

class RDB_IMAGE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_IMAGE_t_id_get, _base.RDB_IMAGE_t_id_set)
    width = property(_base.RDB_IMAGE_t_width_get, _base.RDB_IMAGE_t_width_set)
    height = property(_base.RDB_IMAGE_t_height_get, _base.RDB_IMAGE_t_height_set)
    pixelSize = property(_base.RDB_IMAGE_t_pixelSize_get, _base.RDB_IMAGE_t_pixelSize_set)
    pixelFormat = property(_base.RDB_IMAGE_t_pixelFormat_get, _base.RDB_IMAGE_t_pixelFormat_set)
    cameraId = property(_base.RDB_IMAGE_t_cameraId_get, _base.RDB_IMAGE_t_cameraId_set)
    imgSize = property(_base.RDB_IMAGE_t_imgSize_get, _base.RDB_IMAGE_t_imgSize_set)
    color = property(_base.RDB_IMAGE_t_color_get, _base.RDB_IMAGE_t_color_set)
    spare1 = property(_base.RDB_IMAGE_t_spare1_get, _base.RDB_IMAGE_t_spare1_set)

    def __init__(self):
        _base.RDB_IMAGE_t_swiginit(self, _base.new_RDB_IMAGE_t())
    __swig_destroy__ = _base.delete_RDB_IMAGE_t

# Register RDB_IMAGE_t in _base:
_base.RDB_IMAGE_t_swigregister(RDB_IMAGE_t)

class RDB_CUSTOM_LIGHT_B_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lightElementId = property(_base.RDB_CUSTOM_LIGHT_B_t_lightElementId_get, _base.RDB_CUSTOM_LIGHT_B_t_lightElementId_set)
    width = property(_base.RDB_CUSTOM_LIGHT_B_t_width_get, _base.RDB_CUSTOM_LIGHT_B_t_width_set)
    height = property(_base.RDB_CUSTOM_LIGHT_B_t_height_get, _base.RDB_CUSTOM_LIGHT_B_t_height_set)
    spare0 = property(_base.RDB_CUSTOM_LIGHT_B_t_spare0_get, _base.RDB_CUSTOM_LIGHT_B_t_spare0_set)
    dataSize = property(_base.RDB_CUSTOM_LIGHT_B_t_dataSize_get, _base.RDB_CUSTOM_LIGHT_B_t_dataSize_set)
    spare1 = property(_base.RDB_CUSTOM_LIGHT_B_t_spare1_get, _base.RDB_CUSTOM_LIGHT_B_t_spare1_set)

    def __init__(self):
        _base.RDB_CUSTOM_LIGHT_B_t_swiginit(self, _base.new_RDB_CUSTOM_LIGHT_B_t())
    __swig_destroy__ = _base.delete_RDB_CUSTOM_LIGHT_B_t

# Register RDB_CUSTOM_LIGHT_B_t in _base:
_base.RDB_CUSTOM_LIGHT_B_t_swigregister(RDB_CUSTOM_LIGHT_B_t)

class RDB_CUSTOM_LIGHT_GROUP_B_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lightElementId = property(_base.RDB_CUSTOM_LIGHT_GROUP_B_t_lightElementId_get, _base.RDB_CUSTOM_LIGHT_GROUP_B_t_lightElementId_set)
    groupId = property(_base.RDB_CUSTOM_LIGHT_GROUP_B_t_groupId_get, _base.RDB_CUSTOM_LIGHT_GROUP_B_t_groupId_set)
    intensity = property(_base.RDB_CUSTOM_LIGHT_GROUP_B_t_intensity_get, _base.RDB_CUSTOM_LIGHT_GROUP_B_t_intensity_set)
    hOffset = property(_base.RDB_CUSTOM_LIGHT_GROUP_B_t_hOffset_get, _base.RDB_CUSTOM_LIGHT_GROUP_B_t_hOffset_set)
    pOffset = property(_base.RDB_CUSTOM_LIGHT_GROUP_B_t_pOffset_get, _base.RDB_CUSTOM_LIGHT_GROUP_B_t_pOffset_set)
    spare = property(_base.RDB_CUSTOM_LIGHT_GROUP_B_t_spare_get, _base.RDB_CUSTOM_LIGHT_GROUP_B_t_spare_set)

    def __init__(self):
        _base.RDB_CUSTOM_LIGHT_GROUP_B_t_swiginit(self, _base.new_RDB_CUSTOM_LIGHT_GROUP_B_t())
    __swig_destroy__ = _base.delete_RDB_CUSTOM_LIGHT_GROUP_B_t

# Register RDB_CUSTOM_LIGHT_GROUP_B_t in _base:
_base.RDB_CUSTOM_LIGHT_GROUP_B_t_swigregister(RDB_CUSTOM_LIGHT_GROUP_B_t)

class RDB_FUNCTION_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_FUNCTION_t_id_get, _base.RDB_FUNCTION_t_id_set)
    type = property(_base.RDB_FUNCTION_t_type_get, _base.RDB_FUNCTION_t_type_set)
    dimension = property(_base.RDB_FUNCTION_t_dimension_get, _base.RDB_FUNCTION_t_dimension_set)
    spare = property(_base.RDB_FUNCTION_t_spare_get, _base.RDB_FUNCTION_t_spare_set)
    dataSize = property(_base.RDB_FUNCTION_t_dataSize_get, _base.RDB_FUNCTION_t_dataSize_set)
    spare1 = property(_base.RDB_FUNCTION_t_spare1_get, _base.RDB_FUNCTION_t_spare1_set)

    def __init__(self):
        _base.RDB_FUNCTION_t_swiginit(self, _base.new_RDB_FUNCTION_t())
    __swig_destroy__ = _base.delete_RDB_FUNCTION_t

# Register RDB_FUNCTION_t in _base:
_base.RDB_FUNCTION_t_swigregister(RDB_FUNCTION_t)

class RDB_SENSOR_STATE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_SENSOR_STATE_t_id_get, _base.RDB_SENSOR_STATE_t_id_set)
    type = property(_base.RDB_SENSOR_STATE_t_type_get, _base.RDB_SENSOR_STATE_t_type_set)
    hostCategory = property(_base.RDB_SENSOR_STATE_t_hostCategory_get, _base.RDB_SENSOR_STATE_t_hostCategory_set)
    spare0 = property(_base.RDB_SENSOR_STATE_t_spare0_get, _base.RDB_SENSOR_STATE_t_spare0_set)
    hostId = property(_base.RDB_SENSOR_STATE_t_hostId_get, _base.RDB_SENSOR_STATE_t_hostId_set)
    name = property(_base.RDB_SENSOR_STATE_t_name_get, _base.RDB_SENSOR_STATE_t_name_set)
    fovHV = property(_base.RDB_SENSOR_STATE_t_fovHV_get, _base.RDB_SENSOR_STATE_t_fovHV_set)
    clipNF = property(_base.RDB_SENSOR_STATE_t_clipNF_get, _base.RDB_SENSOR_STATE_t_clipNF_set)
    pos = property(_base.RDB_SENSOR_STATE_t_pos_get, _base.RDB_SENSOR_STATE_t_pos_set)
    originCoordSys = property(_base.RDB_SENSOR_STATE_t_originCoordSys_get, _base.RDB_SENSOR_STATE_t_originCoordSys_set)
    fovOffHV = property(_base.RDB_SENSOR_STATE_t_fovOffHV_get, _base.RDB_SENSOR_STATE_t_fovOffHV_set)
    spare = property(_base.RDB_SENSOR_STATE_t_spare_get, _base.RDB_SENSOR_STATE_t_spare_set)

    def __init__(self):
        _base.RDB_SENSOR_STATE_t_swiginit(self, _base.new_RDB_SENSOR_STATE_t())
    __swig_destroy__ = _base.delete_RDB_SENSOR_STATE_t

# Register RDB_SENSOR_STATE_t in _base:
_base.RDB_SENSOR_STATE_t_swigregister(RDB_SENSOR_STATE_t)

class RDB_SENSOR_OBJECT_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    category = property(_base.RDB_SENSOR_OBJECT_t_category_get, _base.RDB_SENSOR_OBJECT_t_category_set)
    type = property(_base.RDB_SENSOR_OBJECT_t_type_get, _base.RDB_SENSOR_OBJECT_t_type_set)
    flags = property(_base.RDB_SENSOR_OBJECT_t_flags_get, _base.RDB_SENSOR_OBJECT_t_flags_set)
    id = property(_base.RDB_SENSOR_OBJECT_t_id_get, _base.RDB_SENSOR_OBJECT_t_id_set)
    sensorId = property(_base.RDB_SENSOR_OBJECT_t_sensorId_get, _base.RDB_SENSOR_OBJECT_t_sensorId_set)
    dist = property(_base.RDB_SENSOR_OBJECT_t_dist_get, _base.RDB_SENSOR_OBJECT_t_dist_set)
    sensorPos = property(_base.RDB_SENSOR_OBJECT_t_sensorPos_get, _base.RDB_SENSOR_OBJECT_t_sensorPos_set)
    occlusion = property(_base.RDB_SENSOR_OBJECT_t_occlusion_get, _base.RDB_SENSOR_OBJECT_t_occlusion_set)
    deltaLanePos = property(_base.RDB_SENSOR_OBJECT_t_deltaLanePos_get, _base.RDB_SENSOR_OBJECT_t_deltaLanePos_set)
    spare0 = property(_base.RDB_SENSOR_OBJECT_t_spare0_get, _base.RDB_SENSOR_OBJECT_t_spare0_set)
    spare = property(_base.RDB_SENSOR_OBJECT_t_spare_get, _base.RDB_SENSOR_OBJECT_t_spare_set)

    def __init__(self):
        _base.RDB_SENSOR_OBJECT_t_swiginit(self, _base.new_RDB_SENSOR_OBJECT_t())
    __swig_destroy__ = _base.delete_RDB_SENSOR_OBJECT_t

# Register RDB_SENSOR_OBJECT_t in _base:
_base.RDB_SENSOR_OBJECT_t_swigregister(RDB_SENSOR_OBJECT_t)

class RDB_CAMERA_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_CAMERA_t_id_get, _base.RDB_CAMERA_t_id_set)
    width = property(_base.RDB_CAMERA_t_width_get, _base.RDB_CAMERA_t_width_set)
    height = property(_base.RDB_CAMERA_t_height_get, _base.RDB_CAMERA_t_height_set)
    spare0 = property(_base.RDB_CAMERA_t_spare0_get, _base.RDB_CAMERA_t_spare0_set)
    clipNear = property(_base.RDB_CAMERA_t_clipNear_get, _base.RDB_CAMERA_t_clipNear_set)
    clipFar = property(_base.RDB_CAMERA_t_clipFar_get, _base.RDB_CAMERA_t_clipFar_set)
    focalX = property(_base.RDB_CAMERA_t_focalX_get, _base.RDB_CAMERA_t_focalX_set)
    focalY = property(_base.RDB_CAMERA_t_focalY_get, _base.RDB_CAMERA_t_focalY_set)
    principalX = property(_base.RDB_CAMERA_t_principalX_get, _base.RDB_CAMERA_t_principalX_set)
    principalY = property(_base.RDB_CAMERA_t_principalY_get, _base.RDB_CAMERA_t_principalY_set)
    pos = property(_base.RDB_CAMERA_t_pos_get, _base.RDB_CAMERA_t_pos_set)
    spare1 = property(_base.RDB_CAMERA_t_spare1_get, _base.RDB_CAMERA_t_spare1_set)

    def __init__(self):
        _base.RDB_CAMERA_t_swiginit(self, _base.new_RDB_CAMERA_t())
    __swig_destroy__ = _base.delete_RDB_CAMERA_t

# Register RDB_CAMERA_t in _base:
_base.RDB_CAMERA_t_swigregister(RDB_CAMERA_t)

class RDB_LIGHT_SOURCE_BASE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_LIGHT_SOURCE_BASE_t_id_get, _base.RDB_LIGHT_SOURCE_BASE_t_id_set)
    templateId = property(_base.RDB_LIGHT_SOURCE_BASE_t_templateId_get, _base.RDB_LIGHT_SOURCE_BASE_t_templateId_set)
    state = property(_base.RDB_LIGHT_SOURCE_BASE_t_state_get, _base.RDB_LIGHT_SOURCE_BASE_t_state_set)
    playerId = property(_base.RDB_LIGHT_SOURCE_BASE_t_playerId_get, _base.RDB_LIGHT_SOURCE_BASE_t_playerId_set)
    pos = property(_base.RDB_LIGHT_SOURCE_BASE_t_pos_get, _base.RDB_LIGHT_SOURCE_BASE_t_pos_set)
    flags = property(_base.RDB_LIGHT_SOURCE_BASE_t_flags_get, _base.RDB_LIGHT_SOURCE_BASE_t_flags_set)
    spare0 = property(_base.RDB_LIGHT_SOURCE_BASE_t_spare0_get, _base.RDB_LIGHT_SOURCE_BASE_t_spare0_set)
    spare1 = property(_base.RDB_LIGHT_SOURCE_BASE_t_spare1_get, _base.RDB_LIGHT_SOURCE_BASE_t_spare1_set)

    def __init__(self):
        _base.RDB_LIGHT_SOURCE_BASE_t_swiginit(self, _base.new_RDB_LIGHT_SOURCE_BASE_t())
    __swig_destroy__ = _base.delete_RDB_LIGHT_SOURCE_BASE_t

# Register RDB_LIGHT_SOURCE_BASE_t in _base:
_base.RDB_LIGHT_SOURCE_BASE_t_swigregister(RDB_LIGHT_SOURCE_BASE_t)

class RDB_LIGHT_SOURCE_EXT_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nearFar = property(_base.RDB_LIGHT_SOURCE_EXT_t_nearFar_get, _base.RDB_LIGHT_SOURCE_EXT_t_nearFar_set)
    frustumLRBT = property(_base.RDB_LIGHT_SOURCE_EXT_t_frustumLRBT_get, _base.RDB_LIGHT_SOURCE_EXT_t_frustumLRBT_set)
    intensity = property(_base.RDB_LIGHT_SOURCE_EXT_t_intensity_get, _base.RDB_LIGHT_SOURCE_EXT_t_intensity_set)
    atten = property(_base.RDB_LIGHT_SOURCE_EXT_t_atten_get, _base.RDB_LIGHT_SOURCE_EXT_t_atten_set)
    spare1 = property(_base.RDB_LIGHT_SOURCE_EXT_t_spare1_get, _base.RDB_LIGHT_SOURCE_EXT_t_spare1_set)

    def __init__(self):
        _base.RDB_LIGHT_SOURCE_EXT_t_swiginit(self, _base.new_RDB_LIGHT_SOURCE_EXT_t())
    __swig_destroy__ = _base.delete_RDB_LIGHT_SOURCE_EXT_t

# Register RDB_LIGHT_SOURCE_EXT_t in _base:
_base.RDB_LIGHT_SOURCE_EXT_t_swigregister(RDB_LIGHT_SOURCE_EXT_t)

class RDB_LIGHT_SOURCE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    base = property(_base.RDB_LIGHT_SOURCE_t_base_get, _base.RDB_LIGHT_SOURCE_t_base_set)
    ext = property(_base.RDB_LIGHT_SOURCE_t_ext_get, _base.RDB_LIGHT_SOURCE_t_ext_set)

    def __init__(self):
        _base.RDB_LIGHT_SOURCE_t_swiginit(self, _base.new_RDB_LIGHT_SOURCE_t())
    __swig_destroy__ = _base.delete_RDB_LIGHT_SOURCE_t

# Register RDB_LIGHT_SOURCE_t in _base:
_base.RDB_LIGHT_SOURCE_t_swigregister(RDB_LIGHT_SOURCE_t)

class RDB_CONTACT_POINT_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_CONTACT_POINT_t_id_get, _base.RDB_CONTACT_POINT_t_id_set)
    flags = property(_base.RDB_CONTACT_POINT_t_flags_get, _base.RDB_CONTACT_POINT_t_flags_set)
    roadDataIn = property(_base.RDB_CONTACT_POINT_t_roadDataIn_get, _base.RDB_CONTACT_POINT_t_roadDataIn_set)
    friction = property(_base.RDB_CONTACT_POINT_t_friction_get, _base.RDB_CONTACT_POINT_t_friction_set)
    playerId = property(_base.RDB_CONTACT_POINT_t_playerId_get, _base.RDB_CONTACT_POINT_t_playerId_set)
    spare1 = property(_base.RDB_CONTACT_POINT_t_spare1_get, _base.RDB_CONTACT_POINT_t_spare1_set)

    def __init__(self):
        _base.RDB_CONTACT_POINT_t_swiginit(self, _base.new_RDB_CONTACT_POINT_t())
    __swig_destroy__ = _base.delete_RDB_CONTACT_POINT_t

# Register RDB_CONTACT_POINT_t in _base:
_base.RDB_CONTACT_POINT_t_swigregister(RDB_CONTACT_POINT_t)

class RDB_TRAFFIC_SIGN_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_TRAFFIC_SIGN_t_id_get, _base.RDB_TRAFFIC_SIGN_t_id_set)
    playerId = property(_base.RDB_TRAFFIC_SIGN_t_playerId_get, _base.RDB_TRAFFIC_SIGN_t_playerId_set)
    roadDist = property(_base.RDB_TRAFFIC_SIGN_t_roadDist_get, _base.RDB_TRAFFIC_SIGN_t_roadDist_set)
    pos = property(_base.RDB_TRAFFIC_SIGN_t_pos_get, _base.RDB_TRAFFIC_SIGN_t_pos_set)
    type = property(_base.RDB_TRAFFIC_SIGN_t_type_get, _base.RDB_TRAFFIC_SIGN_t_type_set)
    subType = property(_base.RDB_TRAFFIC_SIGN_t_subType_get, _base.RDB_TRAFFIC_SIGN_t_subType_set)
    value = property(_base.RDB_TRAFFIC_SIGN_t_value_get, _base.RDB_TRAFFIC_SIGN_t_value_set)
    state = property(_base.RDB_TRAFFIC_SIGN_t_state_get, _base.RDB_TRAFFIC_SIGN_t_state_set)
    readability = property(_base.RDB_TRAFFIC_SIGN_t_readability_get, _base.RDB_TRAFFIC_SIGN_t_readability_set)
    occlusion = property(_base.RDB_TRAFFIC_SIGN_t_occlusion_get, _base.RDB_TRAFFIC_SIGN_t_occlusion_set)
    spare0 = property(_base.RDB_TRAFFIC_SIGN_t_spare0_get, _base.RDB_TRAFFIC_SIGN_t_spare0_set)
    addOnId = property(_base.RDB_TRAFFIC_SIGN_t_addOnId_get, _base.RDB_TRAFFIC_SIGN_t_addOnId_set)
    minLane = property(_base.RDB_TRAFFIC_SIGN_t_minLane_get, _base.RDB_TRAFFIC_SIGN_t_minLane_set)
    maxLane = property(_base.RDB_TRAFFIC_SIGN_t_maxLane_get, _base.RDB_TRAFFIC_SIGN_t_maxLane_set)
    spare = property(_base.RDB_TRAFFIC_SIGN_t_spare_get, _base.RDB_TRAFFIC_SIGN_t_spare_set)

    def __init__(self):
        _base.RDB_TRAFFIC_SIGN_t_swiginit(self, _base.new_RDB_TRAFFIC_SIGN_t())
    __swig_destroy__ = _base.delete_RDB_TRAFFIC_SIGN_t

# Register RDB_TRAFFIC_SIGN_t in _base:
_base.RDB_TRAFFIC_SIGN_t_swigregister(RDB_TRAFFIC_SIGN_t)

class RDB_ROAD_STATE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_ROAD_STATE_t_playerId_get, _base.RDB_ROAD_STATE_t_playerId_set)
    wheelId = property(_base.RDB_ROAD_STATE_t_wheelId_get, _base.RDB_ROAD_STATE_t_wheelId_set)
    spare0 = property(_base.RDB_ROAD_STATE_t_spare0_get, _base.RDB_ROAD_STATE_t_spare0_set)
    spare1 = property(_base.RDB_ROAD_STATE_t_spare1_get, _base.RDB_ROAD_STATE_t_spare1_set)
    roadId = property(_base.RDB_ROAD_STATE_t_roadId_get, _base.RDB_ROAD_STATE_t_roadId_set)
    defaultSpeed = property(_base.RDB_ROAD_STATE_t_defaultSpeed_get, _base.RDB_ROAD_STATE_t_defaultSpeed_set)
    waterLevel = property(_base.RDB_ROAD_STATE_t_waterLevel_get, _base.RDB_ROAD_STATE_t_waterLevel_set)
    eventMask = property(_base.RDB_ROAD_STATE_t_eventMask_get, _base.RDB_ROAD_STATE_t_eventMask_set)
    distToJunc = property(_base.RDB_ROAD_STATE_t_distToJunc_get, _base.RDB_ROAD_STATE_t_distToJunc_set)
    spare2 = property(_base.RDB_ROAD_STATE_t_spare2_get, _base.RDB_ROAD_STATE_t_spare2_set)

    def __init__(self):
        _base.RDB_ROAD_STATE_t_swiginit(self, _base.new_RDB_ROAD_STATE_t())
    __swig_destroy__ = _base.delete_RDB_ROAD_STATE_t

# Register RDB_ROAD_STATE_t in _base:
_base.RDB_ROAD_STATE_t_swigregister(RDB_ROAD_STATE_t)

class RDB_ENVIRONMENT_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    visibility = property(_base.RDB_ENVIRONMENT_t_visibility_get, _base.RDB_ENVIRONMENT_t_visibility_set)
    timeOfDay = property(_base.RDB_ENVIRONMENT_t_timeOfDay_get, _base.RDB_ENVIRONMENT_t_timeOfDay_set)
    brightness = property(_base.RDB_ENVIRONMENT_t_brightness_get, _base.RDB_ENVIRONMENT_t_brightness_set)
    precipitation = property(_base.RDB_ENVIRONMENT_t_precipitation_get, _base.RDB_ENVIRONMENT_t_precipitation_set)
    cloudState = property(_base.RDB_ENVIRONMENT_t_cloudState_get, _base.RDB_ENVIRONMENT_t_cloudState_set)
    flags = property(_base.RDB_ENVIRONMENT_t_flags_get, _base.RDB_ENVIRONMENT_t_flags_set)
    temperature = property(_base.RDB_ENVIRONMENT_t_temperature_get, _base.RDB_ENVIRONMENT_t_temperature_set)
    day = property(_base.RDB_ENVIRONMENT_t_day_get, _base.RDB_ENVIRONMENT_t_day_set)
    month = property(_base.RDB_ENVIRONMENT_t_month_get, _base.RDB_ENVIRONMENT_t_month_set)
    year = property(_base.RDB_ENVIRONMENT_t_year_get, _base.RDB_ENVIRONMENT_t_year_set)
    timeZoneMinutesWest = property(_base.RDB_ENVIRONMENT_t_timeZoneMinutesWest_get, _base.RDB_ENVIRONMENT_t_timeZoneMinutesWest_set)
    spare2 = property(_base.RDB_ENVIRONMENT_t_spare2_get, _base.RDB_ENVIRONMENT_t_spare2_set)
    spare1 = property(_base.RDB_ENVIRONMENT_t_spare1_get, _base.RDB_ENVIRONMENT_t_spare1_set)

    def __init__(self):
        _base.RDB_ENVIRONMENT_t_swiginit(self, _base.new_RDB_ENVIRONMENT_t())
    __swig_destroy__ = _base.delete_RDB_ENVIRONMENT_t

# Register RDB_ENVIRONMENT_t in _base:
_base.RDB_ENVIRONMENT_t_swigregister(RDB_ENVIRONMENT_t)

class RDB_PED_ANIMATION_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_PED_ANIMATION_t_playerId_get, _base.RDB_PED_ANIMATION_t_playerId_set)
    pos = property(_base.RDB_PED_ANIMATION_t_pos_get, _base.RDB_PED_ANIMATION_t_pos_set)
    spare = property(_base.RDB_PED_ANIMATION_t_spare_get, _base.RDB_PED_ANIMATION_t_spare_set)
    noCoords = property(_base.RDB_PED_ANIMATION_t_noCoords_get, _base.RDB_PED_ANIMATION_t_noCoords_set)
    dataSize = property(_base.RDB_PED_ANIMATION_t_dataSize_get, _base.RDB_PED_ANIMATION_t_dataSize_set)

    def __init__(self):
        _base.RDB_PED_ANIMATION_t_swiginit(self, _base.new_RDB_PED_ANIMATION_t())
    __swig_destroy__ = _base.delete_RDB_PED_ANIMATION_t

# Register RDB_PED_ANIMATION_t in _base:
_base.RDB_PED_ANIMATION_t_swigregister(RDB_PED_ANIMATION_t)

class RDB_CUSTOM_SCORING_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_CUSTOM_SCORING_t_playerId_get, _base.RDB_CUSTOM_SCORING_t_playerId_set)
    pathS = property(_base.RDB_CUSTOM_SCORING_t_pathS_get, _base.RDB_CUSTOM_SCORING_t_pathS_set)
    roadS = property(_base.RDB_CUSTOM_SCORING_t_roadS_get, _base.RDB_CUSTOM_SCORING_t_roadS_set)
    fuelCurrent = property(_base.RDB_CUSTOM_SCORING_t_fuelCurrent_get, _base.RDB_CUSTOM_SCORING_t_fuelCurrent_set)
    fuelAverage = property(_base.RDB_CUSTOM_SCORING_t_fuelAverage_get, _base.RDB_CUSTOM_SCORING_t_fuelAverage_set)
    stateFlags = property(_base.RDB_CUSTOM_SCORING_t_stateFlags_get, _base.RDB_CUSTOM_SCORING_t_stateFlags_set)
    slip = property(_base.RDB_CUSTOM_SCORING_t_slip_get, _base.RDB_CUSTOM_SCORING_t_slip_set)
    spare = property(_base.RDB_CUSTOM_SCORING_t_spare_get, _base.RDB_CUSTOM_SCORING_t_spare_set)

    def __init__(self):
        _base.RDB_CUSTOM_SCORING_t_swiginit(self, _base.new_RDB_CUSTOM_SCORING_t())
    __swig_destroy__ = _base.delete_RDB_CUSTOM_SCORING_t

# Register RDB_CUSTOM_SCORING_t in _base:
_base.RDB_CUSTOM_SCORING_t_swigregister(RDB_CUSTOM_SCORING_t)

class RDB_TRIGGER_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deltaT = property(_base.RDB_TRIGGER_t_deltaT_get, _base.RDB_TRIGGER_t_deltaT_set)
    frameNo = property(_base.RDB_TRIGGER_t_frameNo_get, _base.RDB_TRIGGER_t_frameNo_set)
    features = property(_base.RDB_TRIGGER_t_features_get, _base.RDB_TRIGGER_t_features_set)
    spare0 = property(_base.RDB_TRIGGER_t_spare0_get, _base.RDB_TRIGGER_t_spare0_set)

    def __init__(self):
        _base.RDB_TRIGGER_t_swiginit(self, _base.new_RDB_TRIGGER_t())
    __swig_destroy__ = _base.delete_RDB_TRIGGER_t

# Register RDB_TRIGGER_t in _base:
_base.RDB_TRIGGER_t_swigregister(RDB_TRIGGER_t)

class RDB_IG_FRAME_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deltaT = property(_base.RDB_IG_FRAME_t_deltaT_get, _base.RDB_IG_FRAME_t_deltaT_set)
    frameNo = property(_base.RDB_IG_FRAME_t_frameNo_get, _base.RDB_IG_FRAME_t_frameNo_set)
    spare = property(_base.RDB_IG_FRAME_t_spare_get, _base.RDB_IG_FRAME_t_spare_set)

    def __init__(self):
        _base.RDB_IG_FRAME_t_swiginit(self, _base.new_RDB_IG_FRAME_t())
    __swig_destroy__ = _base.delete_RDB_IG_FRAME_t

# Register RDB_IG_FRAME_t in _base:
_base.RDB_IG_FRAME_t_swigregister(RDB_IG_FRAME_t)

class RDB_DRIVER_CTRL_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_DRIVER_CTRL_t_playerId_get, _base.RDB_DRIVER_CTRL_t_playerId_set)
    steeringWheel = property(_base.RDB_DRIVER_CTRL_t_steeringWheel_get, _base.RDB_DRIVER_CTRL_t_steeringWheel_set)
    steeringSpeed = property(_base.RDB_DRIVER_CTRL_t_steeringSpeed_get, _base.RDB_DRIVER_CTRL_t_steeringSpeed_set)
    throttlePedal = property(_base.RDB_DRIVER_CTRL_t_throttlePedal_get, _base.RDB_DRIVER_CTRL_t_throttlePedal_set)
    brakePedal = property(_base.RDB_DRIVER_CTRL_t_brakePedal_get, _base.RDB_DRIVER_CTRL_t_brakePedal_set)
    clutchPedal = property(_base.RDB_DRIVER_CTRL_t_clutchPedal_get, _base.RDB_DRIVER_CTRL_t_clutchPedal_set)
    accelTgt = property(_base.RDB_DRIVER_CTRL_t_accelTgt_get, _base.RDB_DRIVER_CTRL_t_accelTgt_set)
    steeringTgt = property(_base.RDB_DRIVER_CTRL_t_steeringTgt_get, _base.RDB_DRIVER_CTRL_t_steeringTgt_set)
    curvatureTgt = property(_base.RDB_DRIVER_CTRL_t_curvatureTgt_get, _base.RDB_DRIVER_CTRL_t_curvatureTgt_set)
    steeringTorque = property(_base.RDB_DRIVER_CTRL_t_steeringTorque_get, _base.RDB_DRIVER_CTRL_t_steeringTorque_set)
    engineTorqueTgt = property(_base.RDB_DRIVER_CTRL_t_engineTorqueTgt_get, _base.RDB_DRIVER_CTRL_t_engineTorqueTgt_set)
    speedTgt = property(_base.RDB_DRIVER_CTRL_t_speedTgt_get, _base.RDB_DRIVER_CTRL_t_speedTgt_set)
    gear = property(_base.RDB_DRIVER_CTRL_t_gear_get, _base.RDB_DRIVER_CTRL_t_gear_set)
    sourceId = property(_base.RDB_DRIVER_CTRL_t_sourceId_get, _base.RDB_DRIVER_CTRL_t_sourceId_set)
    spare0 = property(_base.RDB_DRIVER_CTRL_t_spare0_get, _base.RDB_DRIVER_CTRL_t_spare0_set)
    validityFlags = property(_base.RDB_DRIVER_CTRL_t_validityFlags_get, _base.RDB_DRIVER_CTRL_t_validityFlags_set)
    flags = property(_base.RDB_DRIVER_CTRL_t_flags_get, _base.RDB_DRIVER_CTRL_t_flags_set)
    mockupInput0 = property(_base.RDB_DRIVER_CTRL_t_mockupInput0_get, _base.RDB_DRIVER_CTRL_t_mockupInput0_set)
    mockupInput1 = property(_base.RDB_DRIVER_CTRL_t_mockupInput1_get, _base.RDB_DRIVER_CTRL_t_mockupInput1_set)
    mockupInput2 = property(_base.RDB_DRIVER_CTRL_t_mockupInput2_get, _base.RDB_DRIVER_CTRL_t_mockupInput2_set)
    spare = property(_base.RDB_DRIVER_CTRL_t_spare_get, _base.RDB_DRIVER_CTRL_t_spare_set)

    def __init__(self):
        _base.RDB_DRIVER_CTRL_t_swiginit(self, _base.new_RDB_DRIVER_CTRL_t())
    __swig_destroy__ = _base.delete_RDB_DRIVER_CTRL_t

# Register RDB_DRIVER_CTRL_t in _base:
_base.RDB_DRIVER_CTRL_t_swigregister(RDB_DRIVER_CTRL_t)

class RDB_DRIVER_PERCEPTION_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_DRIVER_PERCEPTION_t_playerId_get, _base.RDB_DRIVER_PERCEPTION_t_playerId_set)
    speedFromRules = property(_base.RDB_DRIVER_PERCEPTION_t_speedFromRules_get, _base.RDB_DRIVER_PERCEPTION_t_speedFromRules_set)
    distToSpeed = property(_base.RDB_DRIVER_PERCEPTION_t_distToSpeed_get, _base.RDB_DRIVER_PERCEPTION_t_distToSpeed_set)
    spare0 = property(_base.RDB_DRIVER_PERCEPTION_t_spare0_get, _base.RDB_DRIVER_PERCEPTION_t_spare0_set)
    flags = property(_base.RDB_DRIVER_PERCEPTION_t_flags_get, _base.RDB_DRIVER_PERCEPTION_t_flags_set)
    spare = property(_base.RDB_DRIVER_PERCEPTION_t_spare_get, _base.RDB_DRIVER_PERCEPTION_t_spare_set)

    def __init__(self):
        _base.RDB_DRIVER_PERCEPTION_t_swiginit(self, _base.new_RDB_DRIVER_PERCEPTION_t())
    __swig_destroy__ = _base.delete_RDB_DRIVER_PERCEPTION_t

# Register RDB_DRIVER_PERCEPTION_t in _base:
_base.RDB_DRIVER_PERCEPTION_t_swigregister(RDB_DRIVER_PERCEPTION_t)

class RDB_TRAFFIC_LIGHT_BASE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_TRAFFIC_LIGHT_BASE_t_id_get, _base.RDB_TRAFFIC_LIGHT_BASE_t_id_set)
    state = property(_base.RDB_TRAFFIC_LIGHT_BASE_t_state_get, _base.RDB_TRAFFIC_LIGHT_BASE_t_state_set)
    stateMask = property(_base.RDB_TRAFFIC_LIGHT_BASE_t_stateMask_get, _base.RDB_TRAFFIC_LIGHT_BASE_t_stateMask_set)

    def __init__(self):
        _base.RDB_TRAFFIC_LIGHT_BASE_t_swiginit(self, _base.new_RDB_TRAFFIC_LIGHT_BASE_t())
    __swig_destroy__ = _base.delete_RDB_TRAFFIC_LIGHT_BASE_t

# Register RDB_TRAFFIC_LIGHT_BASE_t in _base:
_base.RDB_TRAFFIC_LIGHT_BASE_t_swigregister(RDB_TRAFFIC_LIGHT_BASE_t)

class RDB_TRAFFIC_LIGHT_PHASE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    duration = property(_base.RDB_TRAFFIC_LIGHT_PHASE_t_duration_get, _base.RDB_TRAFFIC_LIGHT_PHASE_t_duration_set)
    type = property(_base.RDB_TRAFFIC_LIGHT_PHASE_t_type_get, _base.RDB_TRAFFIC_LIGHT_PHASE_t_type_set)
    spare = property(_base.RDB_TRAFFIC_LIGHT_PHASE_t_spare_get, _base.RDB_TRAFFIC_LIGHT_PHASE_t_spare_set)

    def __init__(self):
        _base.RDB_TRAFFIC_LIGHT_PHASE_t_swiginit(self, _base.new_RDB_TRAFFIC_LIGHT_PHASE_t())
    __swig_destroy__ = _base.delete_RDB_TRAFFIC_LIGHT_PHASE_t

# Register RDB_TRAFFIC_LIGHT_PHASE_t in _base:
_base.RDB_TRAFFIC_LIGHT_PHASE_t_swigregister(RDB_TRAFFIC_LIGHT_PHASE_t)

class RDB_TRAFFIC_LIGHT_EXT_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ctrlId = property(_base.RDB_TRAFFIC_LIGHT_EXT_t_ctrlId_get, _base.RDB_TRAFFIC_LIGHT_EXT_t_ctrlId_set)
    cycleTime = property(_base.RDB_TRAFFIC_LIGHT_EXT_t_cycleTime_get, _base.RDB_TRAFFIC_LIGHT_EXT_t_cycleTime_set)
    noPhases = property(_base.RDB_TRAFFIC_LIGHT_EXT_t_noPhases_get, _base.RDB_TRAFFIC_LIGHT_EXT_t_noPhases_set)
    dataSize = property(_base.RDB_TRAFFIC_LIGHT_EXT_t_dataSize_get, _base.RDB_TRAFFIC_LIGHT_EXT_t_dataSize_set)

    def __init__(self):
        _base.RDB_TRAFFIC_LIGHT_EXT_t_swiginit(self, _base.new_RDB_TRAFFIC_LIGHT_EXT_t())
    __swig_destroy__ = _base.delete_RDB_TRAFFIC_LIGHT_EXT_t

# Register RDB_TRAFFIC_LIGHT_EXT_t in _base:
_base.RDB_TRAFFIC_LIGHT_EXT_t_swigregister(RDB_TRAFFIC_LIGHT_EXT_t)

class RDB_TRAFFIC_LIGHT_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    base = property(_base.RDB_TRAFFIC_LIGHT_t_base_get, _base.RDB_TRAFFIC_LIGHT_t_base_set)
    ext = property(_base.RDB_TRAFFIC_LIGHT_t_ext_get, _base.RDB_TRAFFIC_LIGHT_t_ext_set)

    def __init__(self):
        _base.RDB_TRAFFIC_LIGHT_t_swiginit(self, _base.new_RDB_TRAFFIC_LIGHT_t())
    __swig_destroy__ = _base.delete_RDB_TRAFFIC_LIGHT_t

# Register RDB_TRAFFIC_LIGHT_t in _base:
_base.RDB_TRAFFIC_LIGHT_t_swigregister(RDB_TRAFFIC_LIGHT_t)

class RDB_SYNC_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mask = property(_base.RDB_SYNC_t_mask_get, _base.RDB_SYNC_t_mask_set)
    cmdMask = property(_base.RDB_SYNC_t_cmdMask_get, _base.RDB_SYNC_t_cmdMask_set)
    systemTime = property(_base.RDB_SYNC_t_systemTime_get, _base.RDB_SYNC_t_systemTime_set)

    def __init__(self):
        _base.RDB_SYNC_t_swiginit(self, _base.new_RDB_SYNC_t())
    __swig_destroy__ = _base.delete_RDB_SYNC_t

# Register RDB_SYNC_t in _base:
_base.RDB_SYNC_t_swigregister(RDB_SYNC_t)

class RDB_ROAD_QUERY_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_ROAD_QUERY_t_id_get, _base.RDB_ROAD_QUERY_t_id_set)
    flags = property(_base.RDB_ROAD_QUERY_t_flags_get, _base.RDB_ROAD_QUERY_t_flags_set)
    spare = property(_base.RDB_ROAD_QUERY_t_spare_get, _base.RDB_ROAD_QUERY_t_spare_set)
    x = property(_base.RDB_ROAD_QUERY_t_x_get, _base.RDB_ROAD_QUERY_t_x_set)
    y = property(_base.RDB_ROAD_QUERY_t_y_get, _base.RDB_ROAD_QUERY_t_y_set)

    def __init__(self):
        _base.RDB_ROAD_QUERY_t_swiginit(self, _base.new_RDB_ROAD_QUERY_t())
    __swig_destroy__ = _base.delete_RDB_ROAD_QUERY_t

# Register RDB_ROAD_QUERY_t in _base:
_base.RDB_ROAD_QUERY_t_swigregister(RDB_ROAD_QUERY_t)

class RDB_SCP_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    version = property(_base.RDB_SCP_t_version_get, _base.RDB_SCP_t_version_set)
    spare = property(_base.RDB_SCP_t_spare_get, _base.RDB_SCP_t_spare_set)
    sender = property(_base.RDB_SCP_t_sender_get, _base.RDB_SCP_t_sender_set)
    receiver = property(_base.RDB_SCP_t_receiver_get, _base.RDB_SCP_t_receiver_set)
    dataSize = property(_base.RDB_SCP_t_dataSize_get, _base.RDB_SCP_t_dataSize_set)

    def __init__(self):
        _base.RDB_SCP_t_swiginit(self, _base.new_RDB_SCP_t())
    __swig_destroy__ = _base.delete_RDB_SCP_t

# Register RDB_SCP_t in _base:
_base.RDB_SCP_t_swigregister(RDB_SCP_t)

class RDB_PROXY_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    protocol = property(_base.RDB_PROXY_t_protocol_get, _base.RDB_PROXY_t_protocol_set)
    pkgId = property(_base.RDB_PROXY_t_pkgId_get, _base.RDB_PROXY_t_pkgId_set)
    spare = property(_base.RDB_PROXY_t_spare_get, _base.RDB_PROXY_t_spare_set)
    dataSize = property(_base.RDB_PROXY_t_dataSize_get, _base.RDB_PROXY_t_dataSize_set)

    def __init__(self):
        _base.RDB_PROXY_t_swiginit(self, _base.new_RDB_PROXY_t())
    __swig_destroy__ = _base.delete_RDB_PROXY_t

# Register RDB_PROXY_t in _base:
_base.RDB_PROXY_t_swigregister(RDB_PROXY_t)

class RDB_TRAJECTORY_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_TRAJECTORY_t_playerId_get, _base.RDB_TRAJECTORY_t_playerId_set)
    spacing = property(_base.RDB_TRAJECTORY_t_spacing_get, _base.RDB_TRAJECTORY_t_spacing_set)
    flags = property(_base.RDB_TRAJECTORY_t_flags_get, _base.RDB_TRAJECTORY_t_flags_set)
    noDataPoints = property(_base.RDB_TRAJECTORY_t_noDataPoints_get, _base.RDB_TRAJECTORY_t_noDataPoints_set)
    spare = property(_base.RDB_TRAJECTORY_t_spare_get, _base.RDB_TRAJECTORY_t_spare_set)

    def __init__(self):
        _base.RDB_TRAJECTORY_t_swiginit(self, _base.new_RDB_TRAJECTORY_t())
    __swig_destroy__ = _base.delete_RDB_TRAJECTORY_t

# Register RDB_TRAJECTORY_t in _base:
_base.RDB_TRAJECTORY_t_swigregister(RDB_TRAJECTORY_t)

class RDB_MOTION_SYSTEM_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_MOTION_SYSTEM_t_playerId_get, _base.RDB_MOTION_SYSTEM_t_playerId_set)
    flags = property(_base.RDB_MOTION_SYSTEM_t_flags_get, _base.RDB_MOTION_SYSTEM_t_flags_set)
    pos = property(_base.RDB_MOTION_SYSTEM_t_pos_get, _base.RDB_MOTION_SYSTEM_t_pos_set)
    speed = property(_base.RDB_MOTION_SYSTEM_t_speed_get, _base.RDB_MOTION_SYSTEM_t_speed_set)
    subSystem = property(_base.RDB_MOTION_SYSTEM_t_subSystem_get, _base.RDB_MOTION_SYSTEM_t_subSystem_set)
    spare1 = property(_base.RDB_MOTION_SYSTEM_t_spare1_get, _base.RDB_MOTION_SYSTEM_t_spare1_set)
    spare = property(_base.RDB_MOTION_SYSTEM_t_spare_get, _base.RDB_MOTION_SYSTEM_t_spare_set)

    def __init__(self):
        _base.RDB_MOTION_SYSTEM_t_swiginit(self, _base.new_RDB_MOTION_SYSTEM_t())
    __swig_destroy__ = _base.delete_RDB_MOTION_SYSTEM_t

# Register RDB_MOTION_SYSTEM_t in _base:
_base.RDB_MOTION_SYSTEM_t_swigregister(RDB_MOTION_SYSTEM_t)

class RDB_SYMBOL_STATE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_SYMBOL_STATE_t_id_get, _base.RDB_SYMBOL_STATE_t_id_set)
    pos = property(_base.RDB_SYMBOL_STATE_t_pos_get, _base.RDB_SYMBOL_STATE_t_pos_set)
    scale = property(_base.RDB_SYMBOL_STATE_t_scale_get, _base.RDB_SYMBOL_STATE_t_scale_set)
    spare = property(_base.RDB_SYMBOL_STATE_t_spare_get, _base.RDB_SYMBOL_STATE_t_spare_set)

    def __init__(self):
        _base.RDB_SYMBOL_STATE_t_swiginit(self, _base.new_RDB_SYMBOL_STATE_t())
    __swig_destroy__ = _base.delete_RDB_SYMBOL_STATE_t

# Register RDB_SYMBOL_STATE_t in _base:
_base.RDB_SYMBOL_STATE_t_swigregister(RDB_SYMBOL_STATE_t)

class RDB_CUSTOM_OBJECT_CTRL_TRACK_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_playerId_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_playerId_set)
    flags = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_flags_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_flags_set)
    posType = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_posType_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_posType_set)
    dir = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_dir_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_dir_set)
    roadId = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_roadId_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_roadId_set)
    initialRoadDeltaS = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_initialRoadDeltaS_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_initialRoadDeltaS_set)
    targetRoadT = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_targetRoadT_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_targetRoadT_set)
    speedTgtS = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_speedTgtS_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_speedTgtS_set)
    minAccelS = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_minAccelS_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_minAccelS_set)
    maxAccelS = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_maxAccelS_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_maxAccelS_set)
    accelTgt = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_accelTgt_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_accelTgt_set)
    validityFlags = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_validityFlags_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_validityFlags_set)
    canTimeStamp = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_canTimeStamp_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_canTimeStamp_set)
    spare0 = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_spare0_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_spare0_set)
    spare = property(_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_spare_get, _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_spare_set)

    def __init__(self):
        _base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_swiginit(self, _base.new_RDB_CUSTOM_OBJECT_CTRL_TRACK_t())
    __swig_destroy__ = _base.delete_RDB_CUSTOM_OBJECT_CTRL_TRACK_t

# Register RDB_CUSTOM_OBJECT_CTRL_TRACK_t in _base:
_base.RDB_CUSTOM_OBJECT_CTRL_TRACK_t_swigregister(RDB_CUSTOM_OBJECT_CTRL_TRACK_t)

class RDB_FREESPACE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_FREESPACE_t_playerId_get, _base.RDB_FREESPACE_t_playerId_set)
    distance = property(_base.RDB_FREESPACE_t_distance_get, _base.RDB_FREESPACE_t_distance_set)
    angleLeft = property(_base.RDB_FREESPACE_t_angleLeft_get, _base.RDB_FREESPACE_t_angleLeft_set)
    angleRight = property(_base.RDB_FREESPACE_t_angleRight_get, _base.RDB_FREESPACE_t_angleRight_set)
    distanceLeft = property(_base.RDB_FREESPACE_t_distanceLeft_get, _base.RDB_FREESPACE_t_distanceLeft_set)
    distanceRight = property(_base.RDB_FREESPACE_t_distanceRight_get, _base.RDB_FREESPACE_t_distanceRight_set)
    stateLeft = property(_base.RDB_FREESPACE_t_stateLeft_get, _base.RDB_FREESPACE_t_stateLeft_set)
    stateRight = property(_base.RDB_FREESPACE_t_stateRight_get, _base.RDB_FREESPACE_t_stateRight_set)
    stateDistance = property(_base.RDB_FREESPACE_t_stateDistance_get, _base.RDB_FREESPACE_t_stateDistance_set)
    noVisibleObjects = property(_base.RDB_FREESPACE_t_noVisibleObjects_get, _base.RDB_FREESPACE_t_noVisibleObjects_set)
    spare1 = property(_base.RDB_FREESPACE_t_spare1_get, _base.RDB_FREESPACE_t_spare1_set)

    def __init__(self):
        _base.RDB_FREESPACE_t_swiginit(self, _base.new_RDB_FREESPACE_t())
    __swig_destroy__ = _base.delete_RDB_FREESPACE_t

# Register RDB_FREESPACE_t in _base:
_base.RDB_FREESPACE_t_swigregister(RDB_FREESPACE_t)

class RDB_DYN_EL_SWITCH_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    objectId = property(_base.RDB_DYN_EL_SWITCH_t_objectId_get, _base.RDB_DYN_EL_SWITCH_t_objectId_set)
    elementId = property(_base.RDB_DYN_EL_SWITCH_t_elementId_get, _base.RDB_DYN_EL_SWITCH_t_elementId_set)
    scope = property(_base.RDB_DYN_EL_SWITCH_t_scope_get, _base.RDB_DYN_EL_SWITCH_t_scope_set)
    spare0 = property(_base.RDB_DYN_EL_SWITCH_t_spare0_get, _base.RDB_DYN_EL_SWITCH_t_spare0_set)
    state = property(_base.RDB_DYN_EL_SWITCH_t_state_get, _base.RDB_DYN_EL_SWITCH_t_state_set)
    spare1 = property(_base.RDB_DYN_EL_SWITCH_t_spare1_get, _base.RDB_DYN_EL_SWITCH_t_spare1_set)

    def __init__(self):
        _base.RDB_DYN_EL_SWITCH_t_swiginit(self, _base.new_RDB_DYN_EL_SWITCH_t())
    __swig_destroy__ = _base.delete_RDB_DYN_EL_SWITCH_t

# Register RDB_DYN_EL_SWITCH_t in _base:
_base.RDB_DYN_EL_SWITCH_t_swigregister(RDB_DYN_EL_SWITCH_t)

class RDB_DYN_EL_DOF_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    objectId = property(_base.RDB_DYN_EL_DOF_t_objectId_get, _base.RDB_DYN_EL_DOF_t_objectId_set)
    elementId = property(_base.RDB_DYN_EL_DOF_t_elementId_get, _base.RDB_DYN_EL_DOF_t_elementId_set)
    scope = property(_base.RDB_DYN_EL_DOF_t_scope_get, _base.RDB_DYN_EL_DOF_t_scope_set)
    validity = property(_base.RDB_DYN_EL_DOF_t_validity_get, _base.RDB_DYN_EL_DOF_t_validity_set)
    nValues = property(_base.RDB_DYN_EL_DOF_t_nValues_get, _base.RDB_DYN_EL_DOF_t_nValues_set)
    spare0 = property(_base.RDB_DYN_EL_DOF_t_spare0_get, _base.RDB_DYN_EL_DOF_t_spare0_set)
    spare1 = property(_base.RDB_DYN_EL_DOF_t_spare1_get, _base.RDB_DYN_EL_DOF_t_spare1_set)

    def __init__(self):
        _base.RDB_DYN_EL_DOF_t_swiginit(self, _base.new_RDB_DYN_EL_DOF_t())
    __swig_destroy__ = _base.delete_RDB_DYN_EL_DOF_t

# Register RDB_DYN_EL_DOF_t in _base:
_base.RDB_DYN_EL_DOF_t_swigregister(RDB_DYN_EL_DOF_t)

class RDB_END_OF_FRAME_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _base.RDB_END_OF_FRAME_t_swiginit(self, _base.new_RDB_END_OF_FRAME_t())
    __swig_destroy__ = _base.delete_RDB_END_OF_FRAME_t

# Register RDB_END_OF_FRAME_t in _base:
_base.RDB_END_OF_FRAME_t_swigregister(RDB_END_OF_FRAME_t)

class RDB_START_OF_FRAME_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _base.RDB_START_OF_FRAME_t_swiginit(self, _base.new_RDB_START_OF_FRAME_t())
    __swig_destroy__ = _base.delete_RDB_START_OF_FRAME_t

# Register RDB_START_OF_FRAME_t in _base:
_base.RDB_START_OF_FRAME_t_swigregister(RDB_START_OF_FRAME_t)

class RDB_STEER_2_DYN_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_STEER_2_DYN_t_playerId_get, _base.RDB_STEER_2_DYN_t_playerId_set)
    state = property(_base.RDB_STEER_2_DYN_t_state_get, _base.RDB_STEER_2_DYN_t_state_set)
    angle = property(_base.RDB_STEER_2_DYN_t_angle_get, _base.RDB_STEER_2_DYN_t_angle_set)
    rev = property(_base.RDB_STEER_2_DYN_t_rev_get, _base.RDB_STEER_2_DYN_t_rev_set)
    torque = property(_base.RDB_STEER_2_DYN_t_torque_get, _base.RDB_STEER_2_DYN_t_torque_set)
    spare = property(_base.RDB_STEER_2_DYN_t_spare_get, _base.RDB_STEER_2_DYN_t_spare_set)

    def __init__(self):
        _base.RDB_STEER_2_DYN_t_swiginit(self, _base.new_RDB_STEER_2_DYN_t())
    __swig_destroy__ = _base.delete_RDB_STEER_2_DYN_t

# Register RDB_STEER_2_DYN_t in _base:
_base.RDB_STEER_2_DYN_t_swigregister(RDB_STEER_2_DYN_t)

class RDB_DYN_2_STEER_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_DYN_2_STEER_t_playerId_get, _base.RDB_DYN_2_STEER_t_playerId_set)
    state = property(_base.RDB_DYN_2_STEER_t_state_get, _base.RDB_DYN_2_STEER_t_state_set)
    cmd = property(_base.RDB_DYN_2_STEER_t_cmd_get, _base.RDB_DYN_2_STEER_t_cmd_set)
    effects = property(_base.RDB_DYN_2_STEER_t_effects_get, _base.RDB_DYN_2_STEER_t_effects_set)
    torque = property(_base.RDB_DYN_2_STEER_t_torque_get, _base.RDB_DYN_2_STEER_t_torque_set)
    friction = property(_base.RDB_DYN_2_STEER_t_friction_get, _base.RDB_DYN_2_STEER_t_friction_set)
    damping = property(_base.RDB_DYN_2_STEER_t_damping_get, _base.RDB_DYN_2_STEER_t_damping_set)
    stiffness = property(_base.RDB_DYN_2_STEER_t_stiffness_get, _base.RDB_DYN_2_STEER_t_stiffness_set)
    velocity = property(_base.RDB_DYN_2_STEER_t_velocity_get, _base.RDB_DYN_2_STEER_t_velocity_set)
    angle = property(_base.RDB_DYN_2_STEER_t_angle_get, _base.RDB_DYN_2_STEER_t_angle_set)
    neutralPos = property(_base.RDB_DYN_2_STEER_t_neutralPos_get, _base.RDB_DYN_2_STEER_t_neutralPos_set)
    dampingMaxTorque = property(_base.RDB_DYN_2_STEER_t_dampingMaxTorque_get, _base.RDB_DYN_2_STEER_t_dampingMaxTorque_set)
    spare = property(_base.RDB_DYN_2_STEER_t_spare_get, _base.RDB_DYN_2_STEER_t_spare_set)

    def __init__(self):
        _base.RDB_DYN_2_STEER_t_swiginit(self, _base.new_RDB_DYN_2_STEER_t())
    __swig_destroy__ = _base.delete_RDB_DYN_2_STEER_t

# Register RDB_DYN_2_STEER_t in _base:
_base.RDB_DYN_2_STEER_t_swigregister(RDB_DYN_2_STEER_t)

class RDB_RAY_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_base.RDB_RAY_t_id_get, _base.RDB_RAY_t_id_set)
    emitterId = property(_base.RDB_RAY_t_emitterId_get, _base.RDB_RAY_t_emitterId_set)
    type = property(_base.RDB_RAY_t_type_get, _base.RDB_RAY_t_type_set)
    spare0 = property(_base.RDB_RAY_t_spare0_get, _base.RDB_RAY_t_spare0_set)
    spare2 = property(_base.RDB_RAY_t_spare2_get, _base.RDB_RAY_t_spare2_set)
    length = property(_base.RDB_RAY_t_length_get, _base.RDB_RAY_t_length_set)
    spare1 = property(_base.RDB_RAY_t_spare1_get, _base.RDB_RAY_t_spare1_set)
    ray = property(_base.RDB_RAY_t_ray_get, _base.RDB_RAY_t_ray_set)

    def __init__(self):
        _base.RDB_RAY_t_swiginit(self, _base.new_RDB_RAY_t())
    __swig_destroy__ = _base.delete_RDB_RAY_t

# Register RDB_RAY_t in _base:
_base.RDB_RAY_t_swigregister(RDB_RAY_t)

class RDB_RT_PERFORMANCE_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    noOverruns = property(_base.RDB_RT_PERFORMANCE_t_noOverruns_get, _base.RDB_RT_PERFORMANCE_t_noOverruns_set)
    noUnderruns = property(_base.RDB_RT_PERFORMANCE_t_noUnderruns_get, _base.RDB_RT_PERFORMANCE_t_noUnderruns_set)
    noMeasurements = property(_base.RDB_RT_PERFORMANCE_t_noMeasurements_get, _base.RDB_RT_PERFORMANCE_t_noMeasurements_set)
    tolerance = property(_base.RDB_RT_PERFORMANCE_t_tolerance_get, _base.RDB_RT_PERFORMANCE_t_tolerance_set)
    nominalFrameTime = property(_base.RDB_RT_PERFORMANCE_t_nominalFrameTime_get, _base.RDB_RT_PERFORMANCE_t_nominalFrameTime_set)
    actualFrameTime = property(_base.RDB_RT_PERFORMANCE_t_actualFrameTime_get, _base.RDB_RT_PERFORMANCE_t_actualFrameTime_set)
    spare1 = property(_base.RDB_RT_PERFORMANCE_t_spare1_get, _base.RDB_RT_PERFORMANCE_t_spare1_set)

    def __init__(self):
        _base.RDB_RT_PERFORMANCE_t_swiginit(self, _base.new_RDB_RT_PERFORMANCE_t())
    __swig_destroy__ = _base.delete_RDB_RT_PERFORMANCE_t

# Register RDB_RT_PERFORMANCE_t in _base:
_base.RDB_RT_PERFORMANCE_t_swigregister(RDB_RT_PERFORMANCE_t)

class RDB_CUSTOM_LOOK_AHEAD_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    playerId = property(_base.RDB_CUSTOM_LOOK_AHEAD_t_playerId_get, _base.RDB_CUSTOM_LOOK_AHEAD_t_playerId_set)
    distance = property(_base.RDB_CUSTOM_LOOK_AHEAD_t_distance_get, _base.RDB_CUSTOM_LOOK_AHEAD_t_distance_set)
    distUnit = property(_base.RDB_CUSTOM_LOOK_AHEAD_t_distUnit_get, _base.RDB_CUSTOM_LOOK_AHEAD_t_distUnit_set)
    spare0 = property(_base.RDB_CUSTOM_LOOK_AHEAD_t_spare0_get, _base.RDB_CUSTOM_LOOK_AHEAD_t_spare0_set)
    laneOffset = property(_base.RDB_CUSTOM_LOOK_AHEAD_t_laneOffset_get, _base.RDB_CUSTOM_LOOK_AHEAD_t_laneOffset_set)
    hdgRel = property(_base.RDB_CUSTOM_LOOK_AHEAD_t_hdgRel_get, _base.RDB_CUSTOM_LOOK_AHEAD_t_hdgRel_set)
    curvHor = property(_base.RDB_CUSTOM_LOOK_AHEAD_t_curvHor_get, _base.RDB_CUSTOM_LOOK_AHEAD_t_curvHor_set)
    curvHorDot = property(_base.RDB_CUSTOM_LOOK_AHEAD_t_curvHorDot_get, _base.RDB_CUSTOM_LOOK_AHEAD_t_curvHorDot_set)
    spare = property(_base.RDB_CUSTOM_LOOK_AHEAD_t_spare_get, _base.RDB_CUSTOM_LOOK_AHEAD_t_spare_set)

    def __init__(self):
        _base.RDB_CUSTOM_LOOK_AHEAD_t_swiginit(self, _base.new_RDB_CUSTOM_LOOK_AHEAD_t())
    __swig_destroy__ = _base.delete_RDB_CUSTOM_LOOK_AHEAD_t

# Register RDB_CUSTOM_LOOK_AHEAD_t in _base:
_base.RDB_CUSTOM_LOOK_AHEAD_t_swigregister(RDB_CUSTOM_LOOK_AHEAD_t)

class RDB_MSG_HDR_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    magicNo = property(_base.RDB_MSG_HDR_t_magicNo_get, _base.RDB_MSG_HDR_t_magicNo_set)
    version = property(_base.RDB_MSG_HDR_t_version_get, _base.RDB_MSG_HDR_t_version_set)
    headerSize = property(_base.RDB_MSG_HDR_t_headerSize_get, _base.RDB_MSG_HDR_t_headerSize_set)
    dataSize = property(_base.RDB_MSG_HDR_t_dataSize_get, _base.RDB_MSG_HDR_t_dataSize_set)
    frameNo = property(_base.RDB_MSG_HDR_t_frameNo_get, _base.RDB_MSG_HDR_t_frameNo_set)
    simTime = property(_base.RDB_MSG_HDR_t_simTime_get, _base.RDB_MSG_HDR_t_simTime_set)

    def __init__(self):
        _base.RDB_MSG_HDR_t_swiginit(self, _base.new_RDB_MSG_HDR_t())
    __swig_destroy__ = _base.delete_RDB_MSG_HDR_t

# Register RDB_MSG_HDR_t in _base:
_base.RDB_MSG_HDR_t_swigregister(RDB_MSG_HDR_t)

class RDB_MSG_ENTRY_HDR_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    headerSize = property(_base.RDB_MSG_ENTRY_HDR_t_headerSize_get, _base.RDB_MSG_ENTRY_HDR_t_headerSize_set)
    dataSize = property(_base.RDB_MSG_ENTRY_HDR_t_dataSize_get, _base.RDB_MSG_ENTRY_HDR_t_dataSize_set)
    elementSize = property(_base.RDB_MSG_ENTRY_HDR_t_elementSize_get, _base.RDB_MSG_ENTRY_HDR_t_elementSize_set)
    pkgId = property(_base.RDB_MSG_ENTRY_HDR_t_pkgId_get, _base.RDB_MSG_ENTRY_HDR_t_pkgId_set)
    flags = property(_base.RDB_MSG_ENTRY_HDR_t_flags_get, _base.RDB_MSG_ENTRY_HDR_t_flags_set)

    def __init__(self):
        _base.RDB_MSG_ENTRY_HDR_t_swiginit(self, _base.new_RDB_MSG_ENTRY_HDR_t())
    __swig_destroy__ = _base.delete_RDB_MSG_ENTRY_HDR_t

# Register RDB_MSG_ENTRY_HDR_t in _base:
_base.RDB_MSG_ENTRY_HDR_t_swigregister(RDB_MSG_ENTRY_HDR_t)

class RDB_MSG_UNION_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coordSystem = property(_base.RDB_MSG_UNION_t_coordSystem_get, _base.RDB_MSG_UNION_t_coordSystem_set)
    coord = property(_base.RDB_MSG_UNION_t_coord_get, _base.RDB_MSG_UNION_t_coord_set)
    roadPos = property(_base.RDB_MSG_UNION_t_roadPos_get, _base.RDB_MSG_UNION_t_roadPos_set)
    laneInfo = property(_base.RDB_MSG_UNION_t_laneInfo_get, _base.RDB_MSG_UNION_t_laneInfo_set)
    roadMark = property(_base.RDB_MSG_UNION_t_roadMark_get, _base.RDB_MSG_UNION_t_roadMark_set)
    objectCfg = property(_base.RDB_MSG_UNION_t_objectCfg_get, _base.RDB_MSG_UNION_t_objectCfg_set)
    objectState = property(_base.RDB_MSG_UNION_t_objectState_get, _base.RDB_MSG_UNION_t_objectState_set)
    vehicleSystems = property(_base.RDB_MSG_UNION_t_vehicleSystems_get, _base.RDB_MSG_UNION_t_vehicleSystems_set)
    vehicleSetup = property(_base.RDB_MSG_UNION_t_vehicleSetup_get, _base.RDB_MSG_UNION_t_vehicleSetup_set)
    engine = property(_base.RDB_MSG_UNION_t_engine_get, _base.RDB_MSG_UNION_t_engine_set)
    drivetrain = property(_base.RDB_MSG_UNION_t_drivetrain_get, _base.RDB_MSG_UNION_t_drivetrain_set)
    wheel = property(_base.RDB_MSG_UNION_t_wheel_get, _base.RDB_MSG_UNION_t_wheel_set)
    pedAnimation = property(_base.RDB_MSG_UNION_t_pedAnimation_get, _base.RDB_MSG_UNION_t_pedAnimation_set)
    sensorState = property(_base.RDB_MSG_UNION_t_sensorState_get, _base.RDB_MSG_UNION_t_sensorState_set)
    sensorObject = property(_base.RDB_MSG_UNION_t_sensorObject_get, _base.RDB_MSG_UNION_t_sensorObject_set)
    camera = property(_base.RDB_MSG_UNION_t_camera_get, _base.RDB_MSG_UNION_t_camera_set)
    contactPoint = property(_base.RDB_MSG_UNION_t_contactPoint_get, _base.RDB_MSG_UNION_t_contactPoint_set)
    trafficSign = property(_base.RDB_MSG_UNION_t_trafficSign_get, _base.RDB_MSG_UNION_t_trafficSign_set)
    roadState = property(_base.RDB_MSG_UNION_t_roadState_get, _base.RDB_MSG_UNION_t_roadState_set)
    image = property(_base.RDB_MSG_UNION_t_image_get, _base.RDB_MSG_UNION_t_image_set)
    lightSrc = property(_base.RDB_MSG_UNION_t_lightSrc_get, _base.RDB_MSG_UNION_t_lightSrc_set)
    environment = property(_base.RDB_MSG_UNION_t_environment_get, _base.RDB_MSG_UNION_t_environment_set)
    trigger = property(_base.RDB_MSG_UNION_t_trigger_get, _base.RDB_MSG_UNION_t_trigger_set)
    driverCtrl = property(_base.RDB_MSG_UNION_t_driverCtrl_get, _base.RDB_MSG_UNION_t_driverCtrl_set)
    trafficLight = property(_base.RDB_MSG_UNION_t_trafficLight_get, _base.RDB_MSG_UNION_t_trafficLight_set)
    sync = property(_base.RDB_MSG_UNION_t_sync_get, _base.RDB_MSG_UNION_t_sync_set)
    driverPerception = property(_base.RDB_MSG_UNION_t_driverPerception_get, _base.RDB_MSG_UNION_t_driverPerception_set)
    lightMap = property(_base.RDB_MSG_UNION_t_lightMap_get, _base.RDB_MSG_UNION_t_lightMap_set)
    toneMapping = property(_base.RDB_MSG_UNION_t_toneMapping_get, _base.RDB_MSG_UNION_t_toneMapping_set)
    proxy = property(_base.RDB_MSG_UNION_t_proxy_get, _base.RDB_MSG_UNION_t_proxy_set)
    motionSystem = property(_base.RDB_MSG_UNION_t_motionSystem_get, _base.RDB_MSG_UNION_t_motionSystem_set)
    igFrame = property(_base.RDB_MSG_UNION_t_igFrame_get, _base.RDB_MSG_UNION_t_igFrame_set)
    scoring = property(_base.RDB_MSG_UNION_t_scoring_get, _base.RDB_MSG_UNION_t_scoring_set)

    def __init__(self):
        _base.RDB_MSG_UNION_t_swiginit(self, _base.new_RDB_MSG_UNION_t())
    __swig_destroy__ = _base.delete_RDB_MSG_UNION_t

# Register RDB_MSG_UNION_t in _base:
_base.RDB_MSG_UNION_t_swigregister(RDB_MSG_UNION_t)

class RDB_MSG_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hdr = property(_base.RDB_MSG_t_hdr_get, _base.RDB_MSG_t_hdr_set)
    entryHdr = property(_base.RDB_MSG_t_entryHdr_get, _base.RDB_MSG_t_entryHdr_set)
    u = property(_base.RDB_MSG_t_u_get, _base.RDB_MSG_t_u_set)

    def __init__(self):
        _base.RDB_MSG_t_swiginit(self, _base.new_RDB_MSG_t())
    __swig_destroy__ = _base.delete_RDB_MSG_t

# Register RDB_MSG_t in _base:
_base.RDB_MSG_t_swigregister(RDB_MSG_t)

class RDB_SHM_BUFFER_INFO_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    thisSize = property(_base.RDB_SHM_BUFFER_INFO_t_thisSize_get, _base.RDB_SHM_BUFFER_INFO_t_thisSize_set)
    bufferSize = property(_base.RDB_SHM_BUFFER_INFO_t_bufferSize_get, _base.RDB_SHM_BUFFER_INFO_t_bufferSize_set)
    id = property(_base.RDB_SHM_BUFFER_INFO_t_id_get, _base.RDB_SHM_BUFFER_INFO_t_id_set)
    spare0 = property(_base.RDB_SHM_BUFFER_INFO_t_spare0_get, _base.RDB_SHM_BUFFER_INFO_t_spare0_set)
    flags = property(_base.RDB_SHM_BUFFER_INFO_t_flags_get, _base.RDB_SHM_BUFFER_INFO_t_flags_set)
    offset = property(_base.RDB_SHM_BUFFER_INFO_t_offset_get, _base.RDB_SHM_BUFFER_INFO_t_offset_set)
    spare1 = property(_base.RDB_SHM_BUFFER_INFO_t_spare1_get, _base.RDB_SHM_BUFFER_INFO_t_spare1_set)

    def __init__(self):
        _base.RDB_SHM_BUFFER_INFO_t_swiginit(self, _base.new_RDB_SHM_BUFFER_INFO_t())
    __swig_destroy__ = _base.delete_RDB_SHM_BUFFER_INFO_t

# Register RDB_SHM_BUFFER_INFO_t in _base:
_base.RDB_SHM_BUFFER_INFO_t_swigregister(RDB_SHM_BUFFER_INFO_t)

class RDB_SHM_HDR_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    headerSize = property(_base.RDB_SHM_HDR_t_headerSize_get, _base.RDB_SHM_HDR_t_headerSize_set)
    dataSize = property(_base.RDB_SHM_HDR_t_dataSize_get, _base.RDB_SHM_HDR_t_dataSize_set)
    noBuffers = property(_base.RDB_SHM_HDR_t_noBuffers_get, _base.RDB_SHM_HDR_t_noBuffers_set)

    def __init__(self):
        _base.RDB_SHM_HDR_t_swiginit(self, _base.new_RDB_SHM_HDR_t())
    __swig_destroy__ = _base.delete_RDB_SHM_HDR_t

# Register RDB_SHM_HDR_t in _base:
_base.RDB_SHM_HDR_t_swigregister(RDB_SHM_HDR_t)

class TCPInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _base.TCPInterface_swiginit(self, _base.new_TCPInterface(*args))

    def Initialise(self, port, socket_fd):
        return _base.TCPInterface_Initialise(self, port, socket_fd)
    __swig_destroy__ = _base.delete_TCPInterface

# Register TCPInterface in _base:
_base.TCPInterface_swigregister(TCPInterface)

class compmetest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, a, b):
        return _base.compmetest___call__(self, a, b)

    def __init__(self):
        _base.compmetest_swiginit(self, _base.new_compmetest())
    __swig_destroy__ = _base.delete_compmetest

# Register compmetest in _base:
_base.compmetest_swigregister(compmetest)

class RDBInterface(TCPInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _base.RDBInterface_swiginit(self, _base.new_RDBInterface(*args))

    def ConnectDefaultInterface(self):
        return _base.RDBInterface_ConnectDefaultInterface(self)

    def ConnectImageInterface(self):
        return _base.RDBInterface_ConnectImageInterface(self)

    def ReceiveDataOnce(self):
        return _base.RDBInterface_ReceiveDataOnce(self)

    def ReceiveData(self):
        return _base.RDBInterface_ReceiveData(self)

    def ReceiveImageOnce(self):
        return _base.RDBInterface_ReceiveImageOnce(self)

    def ReceiveImage(self):
        return _base.RDBInterface_ReceiveImage(self)

    def GetObjectState(self, object_name):
        return _base.RDBInterface_GetObjectState(self, object_name)

    def GetImage(self):
        return _base.RDBInterface_GetImage(self)

    def HasNewMessage(self, message_id):
        return _base.RDBInterface_HasNewMessage(self, message_id)
    __swig_destroy__ = _base.delete_RDBInterface

# Register RDBInterface in _base:
_base.RDBInterface_swigregister(RDBInterface)


def CreateRDBInterface(host):
    return _base.CreateRDBInterface(host)
class SCPInterface(TCPInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _base.SCPInterface_swiginit(self, _base.new_SCPInterface(*args))

    def ConnectSCPInterface(self):
        return _base.SCPInterface_ConnectSCPInterface(self)

    def SendCommand(self, text):
        return _base.SCPInterface_SendCommand(self, text)
    __swig_destroy__ = _base.delete_SCPInterface

# Register SCPInterface in _base:
_base.SCPInterface_swigregister(SCPInterface)
cvar = _base.cvar


def CreateSCPInterface(host):
    return _base.CreateSCPInterface(host)


